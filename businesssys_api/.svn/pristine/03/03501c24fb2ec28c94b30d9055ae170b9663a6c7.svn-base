<?php

namespace Workflow\Traits;

use app\workflow\model\WorkflowProc;
use app\workflow\model\SystemUser;
use app\workflow\model\WorkflowEntry;
use app\workflow\model\WorkflowFlow;
use app\workflow\model\WorkflowFlowlink;

/**
 * Trait WorkflowTrait
 * @package Workflow\Traits
 */
trait WorkflowTrait
{
    /**通过审批
     * @param $proc_id
     */
    public function pass()
    {
        $this->flowlink($this->option['proc_id']);
    }

    /**工作流退回
     * @param $proc_id  当前id
     * @param string $backproc_id 退回id
     */
    public function unpass()
    {
        $proc_id = $this->option['proc_id'];
        $proc = WorkflowProc::where(['user_id' => $this->option['user_id'], "status" => 0])->findOrFail($proc_id);
        //当前步骤process_id
        $this->option['next_process_id'] = $proc->process_id;
        //驳回
        WorkflowProc::where(['entry_id' => $proc->entry_id, 'process_id' => $proc->process_id, 'circle' => $proc->entry->circle, 'status' => 0, 'id' => ['neq', $proc_id]])
            ->setField('is_deleted', -1);

        WorkflowProc::where('id', $proc_id)->update([
            'status' => -1,
            'auditor_id' => $this->option['user_id'],
            'auditor_name' => $this->option['user_name'],
            'auditor_dept' => SystemUser::find($this->option['user_id'])->department->name,
            'content' => $this->option['content'],
            'is_back' => -1
        ]);
        $backproc = WorkflowProc::findOrFail($this->option['back_proc_id']);
        //退回步骤process_id
        $process_id = $backproc->process_id;
        if ($process_id) {
            // 前往指定流程步骤
            $this->goToProcess($proc->entry, $process_id, $this->option['backtoback']);
        }
        $where = [
            'is_back' => 0,
            'entry_id' => $proc->entry_id,
            'flow_id' => $proc->id,
            'id' => ['between', [$this->option['back_proc_id'], $proc_id]]
        ];
        WorkflowProc::where($where)->setField('is_back', -1);
        //判断是否存在父进程
        if ($proc->entry->pid > 0) {
            $proc->entry->parentEntry->update([
                'id' => $proc->entry->pid,
                'status' => -1,
                'child' => $proc->process_id
            ]);
        }
        $proc->entry->status = '-1';
        $proc->entry->process_id = $process_id;
        $proc->entry->save();

        //通知
    }


    /**
     *提交后下一步还未审核 可以撤回 status =>2
     * @param $entry_id
     */
    public function callBackProcess($entry_id)
    {
        $entry = WorkflowEntry::where(['status' => -1])->findOrFail($entry_id);
        $entry->status = -2;
        $entry->save();
    }


    /**退回后重新提交
     * @param $entry_id
     * @param $user_id
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function resend($entry_id, $user_id)
    {
        $entry = WorkflowEntry::where(['status' => -1])->findOrFail($entry_id);
        $flow = WorkflowFlow::where('is_publish', 1)->findOrFail($entry->flow_id);
        $flowlink = WorkflowFlowlink::alias('fl')->join('__PROCESS__ po', 'po.id=fl.process_id')
            ->where(['fl.flow_id' => $entry->flow_id, 'fl.type' => 'Condition', 'po.position' => 0])->find();
        $entry->circle = $entry->circle + 1;
        $entry->child = 0;
        $entry->status = 0;
        $entry->save();
        $params = [
            'flow_id' => $entry->flow_id,
            'user_id' => $user_id,
            'order_sn' => $entry->order_sn,
            'mid' => $entry->mid
        ];
        //进程初始化
        $this->init($params);
    }
}