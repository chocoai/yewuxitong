<?php

// +----------------------------------------------------------------------
// | ThinkPHP [ WE CAN DO IT JUST THINK ]
// +----------------------------------------------------------------------
// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: 流年 <liu21st@gmail.com>
// +----------------------------------------------------------------------
// 应用公共文件
use think\Db;

/**
 * 把返回的数据集转换成Tree
 * @param $list
 * @param string $pk
 * @param string $pid
 * @param string $child
 * @param string $root
 * @return array
 */
function listToTree($list, $pk = 'id', $pid = 'fid', $child = '_child', $root = '0')
{
    $tree = array();
    if (is_array($list)) {
        $refer = array();
        foreach ($list as $key => $data) {
            $refer[$data[$pk]] = &$list[$key];
        }
        foreach ($list as $key => $data) {
            $parentId = $data[$pid];
            if ($root == $parentId) {
                $tree[] = &$list[$key];
            } else {
                if (isset($refer[$parentId])) {
                    $parent = &$refer[$parentId];
                    $parent[$child][] = &$list[$key];
                }
            }
        }
    }
    return $tree;
}

function formatTree($list, $lv = 0, $title = 'name')
{
    $formatTree = array();
    foreach ($list as $key => $val) {
        $title_prefix = '';
        for ($i = 0; $i < $lv; $i++) {
            $title_prefix .= "|---";
        }
        $val['lv'] = $lv;
        $val['namePrefix'] = $lv == 0 ? '' : $title_prefix;
        $val['showName'] = $lv == 0 ? $val[$title] : $title_prefix . $val[$title];
        if (!array_key_exists('_child', $val)) {
            array_push($formatTree, $val);
        } else {
            $child = $val['_child'];
            unset($val['_child']);
            array_push($formatTree, $val);
            $middle = formatTree($child, $lv + 1, $title); //进行下一层递归
            $formatTree = array_merge($formatTree, $middle);
        }
    }
    return $formatTree;
}

/* * 根据分类获取数据字典
 * @param $type string
 * @return array
 */

function getdictionary($type)
{
    static $list;
    if (empty($list)) {
        $list = cache('dic_list');
    }
    $key = "{$type}";
    if (isset($list[$key])) {
        $dic = $list[$key];
    } else {
        $info = Db::name('dictionary')->where(['type' => $type, 'status' => 1])->field('code,valname')->order('sort')->select();
        $dic = $list[$key] = $info;
        cache('dic_list', $list, ['expire' => 86400]);
    }
    return $dic;
}

/**
 * 批量获取数据字典
 * @param type $arr array
 * @return array
 */
function getdictionarylist($arr)
{
    if (is_array($arr)) {
        foreach ($arr as $value) {
            $data[strtolower($value)] = getdictionary($value);
        }
    } else {
        $data[strtolower($arr)] = getdictionary($arr);
    }
    return $data;
}

/**
 * 二维数组去重根据其中的一个键值对去重
 * @param $arr array
 * @return array
 */
function unique($data = array()){
    $tmp = [-1,-2];
    foreach($data as $key => $v){
        if(!in_array($v['id'],$tmp)){ //不在该id就添加进去
            array_push($tmp,$v['id']);
        }else{  //在里面就删除该值
            unset($data[$key]);
        }
    }
    return $data;
}


if (!function_exists('uuid')) {
    function uuid($prefix = '')
    {
        $chars = md5(uniqid(mt_rand(), true));
        $uuid = substr($chars, 0, 8) . '-';
        $uuid .= substr($chars, 8, 4) . '-';
        $uuid .= substr($chars, 12, 4) . '-';
        $uuid .= substr($chars, 16, 4) . '-';
        $uuid .= substr($chars, 20, 12);
        return $prefix . $uuid;
    }
}

/** 字符串转数组
 * @param $str 要分割的字符串
 * @param string $glue 分隔符
 * @return array
 */
function str2arr($str, $glue = ',')
{
    return explode($glue, $str);
}

/**
 * 数组转换为字符串，主要用于把分隔符调整到第二个参数
 * @param  array $arr 要连接的数组
 * @param  string $glue 分割符
 * @return string
 */
function arr2str($arr, $glue = ',')
{
    return implode($glue, $arr);
}

/**
 * 一维数据数组生成数据树
 * @param array $list 数据列表
 * @param string $id 父ID Key
 * @param string $pid ID Key
 * @param string $son 定义子数据Key
 * @return array
 */
function arr2tree($list, $id = 'id', $pid = 'pid', $son = 'sub') {
    $tree = $map = array();
    foreach ($list as $item) {
        $map[$item[$id]] = $item;
    }
    foreach ($list as $item) {
        if (isset($item[$pid]) && isset($map[$item[$pid]])) {
            $map[$item[$pid]][$son][] = &$map[$item[$id]];
        } else {
            $tree[] = &$map[$item[$id]];
        }
    }
    unset($map);
    return $tree;
}

/**
 * 一维数据数组生成数据树
 * @param array $list 数据列表
 * @param string $id ID Key
 * @param string $pid 父ID Key
 * @param string $path
 * @return array
 */
function arr2table($list, $id = 'id', $pid = 'pid', $path = 'path', $ppath = '') {
    $_array_tree = arr2tree($list, $id, $pid);
    $tree = array();
    foreach ($_array_tree as $_tree) {
        $_tree[$path] = $ppath . '-' . $_tree[$id];
        $_tree['spl'] = str_repeat("&nbsp;&nbsp;&nbsp;├&nbsp;&nbsp;", substr_count($ppath, '-'));
        if (!isset($_tree['sub'])) {
            $_tree['sub'] = array();
        }
        $sub = $_tree['sub'];
        unset($_tree['sub']);
        $tree[] = $_tree;
        if (!empty($sub)) {
            $sub_array = arr2table($sub, $id, $pid, $path, $_tree[$path]);
            $tree = array_merge($tree, (Array)$sub_array);
        }
    }
    return $tree;
}

//返回支票状态
function get_stage($code){
    switch ($code){
        case 1:
            $msg = '待业务报单';
            break;
        case 2:
            $msg = '待部门经理审批';
            break;
        case 3:
            $msg = '待审查助理审批';
            break;
        case 4:
            $msg = '待审查员审批';
            break;
        case 5:
            $msg = '待审查主管审批';
            break;
        case 6:
            $msg = '待审查经理审批';
            break;
        case 7:
            $msg = '待风控总监审批';
            break;
        case 8:
            $msg = '待总经理审批';
            break;
        case 9:
            $msg = '待风控会讨论决定';
            break;
        case 10:
            $msg = '待出保函';
            break;
        case 11:
            $msg = '待跟单员补齐资料';
            break;
        case 12:
            $msg = '待资料入架';
            break;
        case 13:
            $msg = '待指派赎楼员';
            break;
        case 14:
            $msg = '待赎楼经理审批';
            break;
        case 15:
            $msg = '待财务专员审批';
            break;
        case 16:
            $msg = '待财务经理审批';
            break;
        case 17:
            $msg = '待财务总监审批';
            break;
        case 18:
            $msg = '待赎楼员申请出账';
            break;
        case 19:
            $msg = '待财务审核出账';
            break;
        case 20:
            $msg = '待财务出账';
            break;
        case 21:
            $msg = '待赎楼员完成赎楼';
            break;
        case 22:
            $msg = '待取红本';
            break;
        case 23:
            $msg = '待注销过户';
            break;
        case 24:
            $msg = '待取新证';
            break;
        case 25:
            $msg = '待办理抵押';
            break;
        case 26:
            $msg = '待发放尾款';
            break;
        case 27:
            $msg = '已结单';
            break;
        case 28:
            $msg = '撤单审批中';
            break;
        case 29:
            $msg = '已撤单';
            break;
        default:
            $msg ='';
    }
    return $msg;

}

/**
 * 数据字典组装
 * @param $arr
 * @return array
 */
function dictionaryReset($arr)
{
    $newArr = [];
    if($arr){
        foreach($arr as $val){;
            $newArr[$val['code']] = $val['valname'];
        }
    }
    unset($arr);
    return $newArr;

}

/*
 * //根据订单状态获取订单的状态描述
 * @param $code
 * */
function show_status_name($code)
{
    return Db::name('dictionary')->where(['code' => $code,'type' => 'ORDER_JYDB_STATUS'])->value('valname');

}
