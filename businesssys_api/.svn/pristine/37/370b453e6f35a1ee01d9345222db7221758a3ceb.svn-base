<?php
namespace app\admin\controller;

use app\util\ReturnCode;
use app\model\TrialFirst;
use app\model\TrialEstate;
use app\model\TrialData;
use app\model\TrialProcess;
use app\model\SystemUser;
use app\model\WorkflowProc;
use think\Db;
use app\model\Attachment;
use app\model\TrialProcessAttachment;
use app\util\OrderComponents;

/*
 * @author 赵光帅
 * 审批列表审批流程类
 * */
class Approval extends Base {
            // @author 赵光帅
			/**
			 * @api {post} admin/Approval/showApprovalList 审批列表[admin/Approval/showApprovalList]
			 * @apiVersion 1.0.0
			 * @apiName showApprovalList
			 * @apiGroup Approval
			 * @apiSampleRequest admin/Approval/showApprovalList
			 *
			 *
			 * @apiParam {int} create_uid    人员id
             * @apiParam {int} subordinates    1含下属 0不含下属
			 * @apiParam {int} type    订单类型
			 * @apiParam {int} stage    订单状态
			 * @apiParam {int} estate_ecity    城市
			 * @apiParam {int} estate_district    城区
			 * @apiParam {int} search_text    关键字搜索
			 * @apiParam {int} page    页码
			 * @apiParam {int} limit    条数
			 *
             * @apiSuccessExample {json} 返回数据示例:
             * HTTP/1.1 200 OK
             * "data": {
             *       "total": 3,
             *       "per_page": 20,
             *       "current_page": 1,
             *       "last_page": 1,
             *       "data": [
             *           {
             *           "pid": 5,
             *           "id": 30,
             *           "order_sn": "JYDB2018010001",
             *           "create_time": "2018-04-20 14:23:51",
             *           "type": "JYDB",
             *           "money": "200.00",
             *           "stage": "待业务报单",
             *           "estate_name": "万达广场",
             *           "estate_ecity": "440300",
             *           "estate_district": "440304",
             *           "name": "管理员",
             *           "is_normal": -1
             *           }
             *       ]
             *   }
			 * @apiSuccess {int} total    总条数
			 * @apiSuccess {int} per_page    每页显示的条数
             * @apiSuccess {int} current_page    当前页
             * @apiSuccess {int} last_page    总页数
             * @apiSuccess {string} order_sn    业务单号
             * @apiSuccess {int} create_time    报单时间
             * @apiSuccess {int} type     订单类型
             * @apiSuccess {int} money    订单金额
			 * @apiSuccess {string} stage    订单状态
             * @apiSuccess {string} name    理财经理
             * @apiSuccess {string} estate_name    房产名称
             * @apiSuccess {string} estate_ecity     城市
             * @apiSuccess {string} estate_district    城区
             * @apiSuccess {int} is_normal    是否正常 -1未知 0正常 1异常
             * @apiSuccess {int} id    订单表主键id
             * @apiSuccess {int} pid    处理明细表主键id
			 */
	
	        public function showApprovalList(){
	        	$createUid = input('create_uid')?:0;
                $subordinates = input('subordinates')?:0;
	        	$type = input('type');
	        	$stage = input('stage');
	        	$estateEcity = input('estate_ecity');
	        	$estate_district= input('estate_district');
	        	$searchText = trim(input('search_text'));
	        	$page = input('page') ? input('page') : 1;
	        	$pageSize = input('limit') ? input('limit') : config('apiBusiness.ADMIN_LIST_DEFAULT');
                $userId = $this->userInfo['id'];
                $userId = 77;
	        	$map = [];
                //用户判断//
                $userStr = $createUid === 0  ? SystemUser::getOrderPowerStr($userId) : SystemUser::orderCheckPower($userId,$createUid,$subordinates);
                //return json($userStr);
                if($userStr !== false)
                    $map['d.user_id']=['in', $userStr];
                else
                    return $this->buildSuccess([]);
	        	$type && $map['a.type'] = $type;
                $stage && $map['a.stage'] = $stage;
                $estateEcity && $map['b.estate_ecity'] = $estateEcity;
                $estate_district && $map['b.estate_district'] = $estate_district;
                $searchText && $map['b.estate_name|d.order_sn']=['like', "%{$searchText}%"];
	        	$map['a.delete_time'] = NULL;
                $map['a.status'] = 1;
                try{
                    return $this->buildSuccess(WorkflowProc::approval_list($map,$page,$pageSize));
                }catch (\Exception $e){
                    return $this->buildFailed(ReturnCode::RECORD_NOT_FOUND, '查询失败!');
                }

	        	
	        	
	        }

             // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/approvalRecords 审批页面信息[admin/Approval/approvalRecords]
	         * @apiVersion 1.0.0
	         * @apiName approvalRecords
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/approvalRecords
	         *
	         *
	         * @apiParam {string}  order_sn   订单编号
	         * @apiSuccessExample {json} 返回数据示例:
             * HTTP/1.1 200 OK
             * "data": {
             *  "approval_records": [
             *      {
             *       "order_sn": "JYDB2018010001",
             *       "create_time": "2018-05-08 15:24:57",
             *       "process_name": "待跟单员补齐资料",
             *       "auditor_name": "李依华",
             *       "auditor_dept": "财务部",
             *       "status": "通过",
             *       "content": "同意"
             *       }
             *   ],
             *   "other_information": [
             *     {
             *       "id": 1,
             *       "order_sn": "JYDB2018010001",
             *       "process_name": "收到公司的",
             *       "item": "啥打法是否",
             *       "fileinfo": [
             *           {
             *           "savename": "e259d9c4f11593187bf07f50418f6a22.jpg",
             *           "path": "D:\\wamp\\www\\businesssys_api\\public\\",
             *           "url": "\\uploads\\20180427\\e259d9c4f11593187bf07f50418f6a22.jpg"
             *           },
             *           {
             *           "savename": "ad4091691f0f3995af2dcdb13bf5f5c6.jpg",
             *           "path": "D:\\wamp\\www\\businesssys_api\\public\\",
             *           "url": "\\uploads\\20180427\\ad4091691f0f3995af2dcdb13bf5f5c6.jpg"
             *           },
             *           {
             *           "savename": "515af20f54072b6804f25c1e18d234a4.jpg",
             *           "path": "D:\\wamp\\www\\businesssys_api\\public\\",
             *           "url": "\\uploads\\20180427\\515af20f54072b6804f25c1e18d234a4.jpg"
             *           }
             *        ]
             *      },
             *    ]
             *  }
             *
	         * @apiSuccess {string} create_time    审批记录的时间
	         * @apiSuccess {string} process_name    审批节点
	         * @apiSuccess {string} auditor_name    操作人员名称
	         * @apiSuccess {string} auditor_dept    操作人员部门
	         * @apiSuccess {string} status    操作
             * @apiSuccess {string} content    审批意见
             *
             * @apiSuccess {string} proces_name    流程信息(审批信息来源)
             * @apiSuccess {string} item    注意事项
             * @apiSuccess {string} savename    文件名称
             * @apiSuccess {string} path    文件路径
             * @apiSuccess {string} url    文件链接地址
	         */
	        
	        public function approvalRecords(){
	        	$orderSn = input('order_sn');
	        	if(empty($orderSn)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '订单编号不能为空!');
                try{
                    //查询出审批记录
                    $jlField = 'order_sn,create_time,process_name,auditor_name,auditor_dept,status,content';
                    //查询出审批记录
                    $jlList = WorkflowProc::getAll(['order_sn' => $orderSn],$jlField);
                    //查询出其他信息
                    $qtField = 'id,order_sn,process_name,item';
                    $qtList =TrialProcess::getAll(['order_sn' => $orderSn],$qtField);
                    //查询组合好的其他信息
                    $zhInfo = TrialProcess::show_Other_Information($qtList);

                    $arrsInfo['approval_records'] = $jlList;
                    $arrsInfo['other_information'] = $zhInfo;
                    return $this->buildSuccess($arrsInfo);
                }catch (\Exception $e){
                    return $this->buildFailed(ReturnCode::RECORD_NOT_FOUND, '查询失败!');
                }


	        }

            // @author 赵光帅
            /**
             * @api {post} admin/Approval/proceMaterialNode 待处理节点注意事项和附件材料[admin/Approval/proceMaterialNode]
             * @apiVersion 1.0.0
             * @apiName proceMaterialNode
             * @apiGroup Approval
             * @apiSampleRequest admin/Approval/proceMaterialNode
             *
             *
             * @apiParam {string}  order_sn   订单编号
             *
             * @apiSuccessExample {json} 返回数据示例:
             * HTTP/1.1 200 OK
             * "data": {
             *       "id": 1,
             *       "item": "啥打法是否",
             *       "process_name": "待部门经理审批",
             *       "attachInfo": [
             *         {
             *         "id": 2,
             *         "name": "40_2_full_res.jpg",
             *         "url": "\\uploads\\20180427\\e259d9c4f11593187bf07f50418f6a22.jpg"
             *         },
             *         {
             *         "id": 1,
             *         "name": "40_4_full_res.jpg",
             *         "url": "\\uploads\\20180427\\ad4091691f0f3995af2dcdb13bf5f5c6.jpg"
             *         },
             *       ]
             *  }
             *
             * @apiSuccess {string} process_name    节点名称
             * @apiSuccess {string} item    注意事项
             * @apiSuccess {int} id    注意事项表主键id
             * @apiSuccess {string} name    文件名称
             * @apiSuccess {string}   neiceng_id  内层id为,附件表主键id
             * @apiSuccess {string} url    文件链接地址
             */

            public function proceMaterialNode(){
                $orderSn = input('order_sn');
                if(empty($orderSn)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '订单编号不能为空!');
                try{
                    $nodeMap['order_sn'] = $orderSn;
                    $nodeMap['status'] = 0;
                    $nodeMap['user_id'] = $this->userInfo['id'];
                    //查询出节点名称和节点id
                    $resWork = WorkflowProc::getOne($nodeMap,'process_id,process_name');
                    //查询出注意事项和主键ID
                    $resProcess = TrialProcess::getOne(['order_sn' => $orderSn,'workflow_process_id' => $resWork['process_id']],'id,item');
                    if(!empty($resProcess)){
                        //查询出所有的附件id
                        $resAttach = TrialProcessAttachment::getAll(['trial_process_id' => $resProcess['id'],'delete_time' => NULL],'attachment_id');
                        $attachInfo = [];
                        foreach ($resAttach as $k => $v){
                            //查询出附件信息
                            $resMent = Attachment::getOne(['id' => $v['attachment_id'],'delete_time' => NULL],'id,name,url');
                            $attachInfo[] = $resMent;
                        }
                        //组装数据
                        $resProcess['process_name'] = $resWork['process_name'];
                        $resProcess['attachInfo'] = $attachInfo;
                        return $this->buildSuccess($resProcess);
                    }else{
                        return $this->buildSuccess(['process_name' => $resWork['process_name'],'attachInfo' => []]);
                    }
                }catch (\Exception $e){
                    return $this->buildFailed(ReturnCode::RECORD_NOT_FOUND, '查询失败!');
                }

            }


             // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/subApproval 提交审批[admin/Approval/subApproval]
	         * @apiVersion 1.0.0
	         * @apiName subApproval
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/subApproval
	         *
	         *
	         * @apiParam {string}  order_sn   订单编号
	         *
	         *
	         */
	        
	        public function subApproval(){
                $orderSn = input('order_sn');
	        	if(empty($orderSn)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '订单编号不能为空!');
	            
	        	 
	        	 
	        }

             // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/showResult 查询初审结果[admin/Approval/showResult]
	         * @apiVersion 1.0.0
	         * @apiName showResult
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/showResult
	         *
	         *
	         * @apiParam {string}  order_sn   订单编号
	         *
             * @apiSuccessExample {json} 返回数据示例:
             * HTTP/1.1 200 OK
             * {
             *   "code": 1,
             *   "msg": "操作成功",
             *   "data": {
             *   "order_sn": "666666666",
             *   "balance_per": 66,
             *   "is_normal": 66,
             *   "review_rating": 66,
             *   "risk_rating": 66,
             *   "is_material": 1,
             *   "is_guarantee": 1,
             *   "is_asset_prove": 0,
             *   "is_guarantee_estate": 0,
             *   "is_guarantee_money": 1,
             *   "is_guarantee_other": 1,
             *   "guarantee_money": "654.11",
             *   "other_way": "我是谁",
             *   "express_no": null,
             *   "problem": [
             *       {
             *      "id": 25,
             *       "describe": "呵呵1213",
             *       "status": 1
             *       },
             *       {
             *      "id": 26,
             *       "describe": "呵呵456",
             *       "status": 0
             *       },
             *       {
             *       "id": 27,
             *       "describe": "呵呵帅那个帅789",
             *       "status": 0
             *       }
             *   ],
             *   "data": [
             *       {
             *       "id": 28,
             *       "describe": "初审1213",
             *       "status": 1
             *       },
             *       {
             *       "id": 29,
             *       "describe": "别别别456",
             *       "status": 0
             *       },
             *       {
             *       "id": 30,
             *       "describe": "呵呵帅那个帅789",
             *       "status": 0
             *       }
             *     ]
             *     "houseinfo": [
             *           {
             *            "hid": 26,
             *            "estate_owner": null,
             *            "estate_owner_type": null,
             *            "estate_name": "国际新城",
             *            "estate_certtype": 1,
             *            "estate_certnum": 123456789,
             *            "house_type": 1111,
             *            "estate_district": "440304"
             *           },
             *          {
             *           "hid": 28,
             *           "estate_owner": null,
             *           "estate_owner_type": null,
             *           "estate_name": "万达广场",
             *           "estate_certtype": 1,
             *           "estate_certnum": 123456789,
             *           "house_type": 1111,
             *           "estate_district": "440304"
             *           }
             *        ],
             *       "assetproof": [
             *           {
             *           "hid": 29,
             *           "estate_owner": null,
             *           "estate_owner_type": null,
             *           "estate_name": "万科",
             *           "estate_certtype": 1,
             *           "estate_certnum": 123456789,
             *           "house_type": 1111,
             *           "estate_district": "440304"
             *           },
             *           {
             *           "hid": 30,
             *           "estate_owner": null,
             *           "estate_owner_type": null,
             *           "estate_name": "绿地",
             *           "estate_certtype": 1,
             *           "estate_certnum": 123456789,
             *           "house_type": 1111,
             *           "estate_district": "440304"
             *           }
             *        ]
             *     }
             *   }
	         * @apiSuccess {string}  order_sn   订单编号
             * @apiSuccess {float}  balance_per   负债成数
             * @apiSuccess {int}  is_normal   是否正常单 0正常 1异常
             * @apiSuccess {int}  review_rating   审查评级
             * @apiSuccess {int}  risk_rating   风险评级
             * @apiSuccess {int}  is_material   是否缺资料通过
             * @apiSuccess {int}  is_guarantee   是否提供反担保
             * @apiSuccess {int}  is_asset_prove   是否提供资产证明
             * @apiSuccess {int}  is_guarantee_estate   是否房产反担保
             * @apiSuccess {int}  is_guarantee_money   是否保证金反担保
             * @apiSuccess {int}  is_guarantee_other   是否其它方式反担保
             * @apiSuccess {float}  guarantee_money   反担保 （保证金）
             * @apiSuccess {string}  other_way   其它方式
             * @apiSuccess {string}  express_no     订单号
             * @apiSuccess {int}  id     problem => 问题汇总信息id
             * @apiSuccess {string}  describe    problem => 问题描述
             * @apiSuccess {int}  status    problnem => 问题状态 0未解决 1已解决
             * @apiSuccess {int}  hid     houseifo => 房产反担保数据表主键id
             * @apiSuccess {string}  estate_name    houseinfo => 房产名称
             * @apiSuccess {int}  estate_certtype    houseinfo => 产证类型
             * @apiSuccess {int}  estate_certnum     houseinfo => 产证编码
             * @apiSuccess {int}  house_type    houseinfo => 房屋类型
             * @apiSuccess {string}  estate_district    houseinfo => 所属城区
             * @apiSuccess {string}  estate_owner    houseinfo => 产权人姓名
             * @apiSuccess {string}  estate_owner_type    houseinfo => 产权人类型 1个人 2企业
	         */
	        
	        public function showResult(){
	        	$orderSn = input('order_sn');
	        	if(empty($orderSn)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '订单编号不能为空!');
                try{
                    $mapFirs['order_sn'] = $orderSn;
                    $mapFirs['delete_time'] = NULL;
                    $firsField = 'order_sn,balance_per,is_normal,review_rating,risk_rating,is_material,is_guarantee,is_asset_prove,is_guarantee_estate,is_guarantee_money,is_guarantee_other,guarantee_money,other_way,express_no';
                    $resTrial = TrialFirst::getOne($mapFirs,$firsField);
                    //查询出问题汇总
                    if(!empty($resTrial)){
                        $problemMap['order_sn'] = $orderSn;
                        $problemMap['type'] = 'QUESTION';
                        $problemMap['delete_time'] = NULL;
                        $resProblem = TrialData::getAll($problemMap,'id,describe,status');
                        if(!empty($resProblem)) $resTrial['problem'] = $resProblem;
                        //判断是否缺资料通过
                        if($resTrial['is_material'] === 1){
                            $dataMap['order_sn'] = $orderSn;
                            $dataMap['type'] = 'NODATA';
                            $dataMap['delete_time'] = NULL;
                            $resData = TrialData::getAll($dataMap,'id,describe,status');
                            if(!empty($resData)) $resTrial['data'] = $resData;
                        }
                        //判断是否提供房产反担保
                        if($resTrial['is_guarantee'] === 1 && $resTrial['is_guarantee_estate'] === 1){
                            $houseInfo = TrialEstate::show_House_Info($orderSn,1);
                            if(!empty($houseInfo)) $resTrial['houseinfo'] = $houseInfo;
                        }
                        //判断是否提供资产证明
                        if($resTrial['is_asset_prove'] === 1){
                            $assetProof = TrialEstate::show_House_Info($orderSn,2);
                            if(!empty($assetProof)) $resTrial['assetproof'] = $assetProof;
                        }
                    }
                    return $this->buildSuccess($resTrial);
                }catch (\Exception $e){
                    return $this->buildFailed(ReturnCode::RECORD_NOT_FOUND, '查询失败!');
                }
       }

        // @author 赵光帅
       /**
        * @api {post} admin/Approval/addResult 初审结果提交[admin/Approval/addResult]
        * @apiVersion 1.0.0
        * @apiName addResult
        * @apiGroup Approval
        * @apiSampleRequest admin/Approval/addResult
        *
        * @apiParam {string}  order_sn   订单编号
        * @apiParam {float}  balance_per   负债成数
        * @apiParam {int}  is_normal   是否正常单 0正常 1异常单
        * @apiParam {int}  review_rating   审查评级
        * @apiParam {int}  risk_rating   风险评级
        * @apiParam {int}  is_material   是否缺资料通过 0未选中  1选中
        * @apiParam {int}  is_guarantee   是否提供反担保 0未选中  1选中
        * @apiParam {int}  is_asset_prove   是否提供资产证明 0未选中  1选中
        * @apiParam {int}  is_guarantee_estate   是否房产反担保 0未选中  1选中
        * @apiParam {int}  is_guarantee_money   是否保证金反担保 0未选中  1选中
        * @apiParam {int}  is_guarantee_other   是否其它方式反担保 0未选中  1选中
        * @apiParam {float}  guarantee_money   反担保 （保证金）
        * @apiParam {string}  other_way   其它方式
        * @apiParam {int}  problem_id     problem(array) => 问题汇总信息 id,新增则这个id可以为空
        * @apiParam {string}  problem_describe    problem(array) => 问题描述
        * @apiParam {int}  problem_status    problem(array) => 问题状态 0未解决 1已解决
        * @apiParam {int}  data_id     data(array) => 缺少的资料 id,新增则这个id为空
        * @apiParam {string}  data_describe    data(array) => 资料描述
        * @apiParam {int}  data_status    data(array) => 资料状态 0未收 1已收
        * @apiParam {array}      houseinfo       (array) => 房产表id
        * @apiParam {array}      assetproof      (array) => 房产表id
        *
        */
	         
	        public function addResult(){
	        	$orderSn = input('order_sn');
                $balancePer = input('balance_per');
                $isNormal = input('is_normal')?:0;
                $reviewRating = input('review_rating');
                $riskRating = input('risk_rating');
                $isMaterial = input('is_material')?:0;
                $isGuarantee = input('is_guarantee')?:0;
                $isassetProve = input('is_asset_prove')?:0;
                $isguaranteeEstate = input('is_guarantee_estate')?:0;
                $isGuaranteemoney = input('is_guarantee_money')?:0;
                $isGuaranteeother = input('is_guarantee_other')?:0;
                $guaranteeMoney = input('guarantee_money');
                $otherWay = input('other_way');
                $proBlem = input('problem');
                $daTa = input('data');
                $houId = input('houseinfo');
                $assetProof = input('assetproof');
                if($isMaterial == 1 && empty($daTa)){
                    return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '资料描述不能为空');
                }
                if($isGuarantee == 1 && $isguaranteeEstate == 1 && empty($houId)){
                    return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '反担保房产选择不能为空');
                }
                if($isGuarantee == 1 && $isGuaranteemoney == 1 && empty($guaranteeMoney)){
                    return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '反担保保证金不能为空');
                }
                if($isGuarantee == 1 && $isGuaranteeother == 1 && empty($otherWay)){
                    return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '反担保其他方式不能为空');
                }
                if($isassetProve == 1 && empty($assetProof)){
                    return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '资产证明不能为空');
                }

                //验证器验证参数
                $valiDate = validate('TrialPrel');
                $data=['order_sn'=>$orderSn,'balance_per'=>$balancePer,'is_normal'=>$isNormal,'review_rating'=>$reviewRating,'risk_rating'=>$riskRating,
                    'is_material'=>$isMaterial,'is_guarantee'=>$isGuarantee,'is_asset_prove'=>$isassetProve,'is_guarantee_estate'=>$isguaranteeEstate,
                    'is_guarantee_money'=>$isGuaranteemoney,'is_guarantee_other'=>$isGuaranteeother,
                    'guarantee_money'=>$guaranteeMoney,'other_way'=>$otherWay];
                if(!$valiDate->check($data)){
                    return $this->buildFailed(ReturnCode::EMPTY_PARAMS, $valiDate->getError());
                }

                // 启动事务
                Db::startTrans();
                try{
                    $firstInfo = TrialFirst::get(['order_sn' => $orderSn]);
                    //判断该订单号对应的初审信息是否已经存在
                    if(!empty($firstInfo)){   //已经存在 编辑记录
                        $firstInfo->balance_per = $balancePer;
                        $firstInfo->is_normal = $isNormal;
                        $firstInfo->review_rating = $reviewRating;
                        $firstInfo->risk_rating = $riskRating;
                        $firstInfo->is_material = $isMaterial;
                        $firstInfo->is_guarantee = $isGuarantee;
                        $firstInfo->is_asset_prove = $isassetProve;
                        $firstInfo->is_guarantee_estate = $isguaranteeEstate;
                        $firstInfo->is_guarantee_money = $isGuaranteemoney;
                        $firstInfo->is_guarantee_other = $isGuaranteeother;
                        $firstInfo->update_time = time();
                        if($isGuaranteemoney == 1){
                            $firstInfo->guarantee_money = $guaranteeMoney;
                        }
                        if($isGuaranteeother == 1){
                            $firstInfo->other_way = $otherWay;
                        }

                        //更新初审信息表数据
                        $firstInfo->save();
                        /*$proBlem = array('1'=>array('problem_id' => 17,'problem_describe'=>'1213','problem_status'=>'1'),
                            '2'=>array('problem_id' => 18,'problem_describe'=>'456','problem_status'=>'0'),
                            '3'=>array('problem_describe'=>'帅那个帅789','problem_status'=>'0')
                        );*/
                        //添加或更新问题记录
                        if(!empty($proBlem)){
                            self::updateProblemData($proBlem,1,$orderSn,$firstInfo->id);
                        }
                        /*$daTa = array('1'=>array('data_id' => 20,'data_describe'=>'777','data_status'=>'1'),
                            '2'=>array('data_id' => 21,'data_describe'=>'888','data_status'=>'0'),
                            '3'=>array('data_describe'=>'帅那个帅789','data_status'=>'1')
                        );*/
                        //添加或更新缺少的资料
                        if(!empty($daTa) && $isMaterial == 1){
                            self::updateProblemData($daTa,2,$orderSn,$firstInfo->id);
                        }
                        //添加反担保
                        //$houId = [1,2,4];
                        if(!empty($houId) && $isGuarantee == 1){
                            self::addFansDanbao($houId,'GUARANTEE',$orderSn,$firstInfo->id);
                        }
                        //$assetProof = [4,5,7];
                        //添加资产证明
                        if(!empty($assetProof) && $isassetProve == 1){
                            self::addFansDanbao($assetProof,'ASSETPROOF',$orderSn,$firstInfo->id);
                        }

                    }else{ //不存在，添加记录
                        $chuShen = [];
                        $chuShen['order_sn'] = $orderSn;
                        $chuShen['balance_per'] = $balancePer;
                        $chuShen['is_normal'] = $isNormal;
                        $chuShen['review_rating'] = $reviewRating;
                        $chuShen['risk_rating'] = $riskRating;
                        $chuShen['is_material'] = $isMaterial;
                        $chuShen['is_guarantee'] = $isGuarantee;
                        $chuShen['is_asset_prove'] = $isassetProve;
                        $chuShen['is_guarantee_estate'] = $isguaranteeEstate;
                        $chuShen['is_guarantee_money'] = $isGuaranteemoney;
                        $chuShen['is_guarantee_other'] = $isGuaranteeother;
                        $chuShen['create_uid'] = $this->userInfo['id'];
                        $chuShen['create_time'] = time();
                        if($isGuaranteemoney == 1){
                            $chuShen['guarantee_money'] = $guaranteeMoney;
                        }
                        if($isGuaranteeother == 1){
                            $chuShen['other_way'] = $otherWay;
                        }
                        //添加初审信息
                        $addChus = TrialFirst::create($chuShen);
                        //添加问题记录
                        /*$proBlem = array('1'=>array('describe'=>'呵呵1213','status'=>'1'),
                            '2'=>array('describe'=>'呵呵456','status'=>'0'),
                            '3'=>array('describe'=>'呵呵帅那个帅789','status'=>'0')
                        );*/
                        if(!empty($proBlem)){
                              self::addProblemData($proBlem,'QUESTION',$orderSn,$addChus->id);
                        }
                        /*$daTa = array('1'=>array('describe'=>'初审1213','status'=>'1'),
                            '2'=>array('describe'=>'别别别456','status'=>'0'),
                            '3'=>array('describe'=>'呵呵帅那个帅789','status'=>'0')
                        );*/
                        //添加缺少的资料
                        if(!empty($daTa) && $isMaterial == 1){
                              self::addProblemData($daTa,'NODATA',$orderSn,$addChus->id);
                        }
                        //$houId = [1,2,6];
                        //添加反担保
                        if(!empty($houId) && $isGuarantee == 1){
                            self::addCollateralassets($houId,'GUARANTEE',$orderSn,$addChus->id);
                        }
                        //$assetProof = [1,2,7];
                        //添加资产证明
                        if(!empty($assetProof) && $isassetProve == 1){
                            self::addCollateralassets($assetProof,'ASSETPROOF',$orderSn,$addChus->id);
                        }
                    }

                    // 提交事务
                    Db::commit();
                    return $this->buildSuccess('编辑程功');

                }catch (\Exception $e){
                    // 回滚事务
                    Db::rollback();
                    return $this->buildFailed(ReturnCode::ADD_FAILED, '编辑失败');

                }
	        	 
	        }

            /*
             * @author 赵光帅
             * 更新初审信息时,添加反担保和资产证明的方法
             * @Param {array}  $dataInfo   数据
             * @Param {string}  $type   GUARANTEE 添加反担保 ASSETPROOF 添加资产证明
             * @Param {string}  $orderSn   订单号
             * @Param {int}  $id   订单初审表主键id
             * */
            protected function addFansDanbao($dataInfo,$type,$orderSn,$id){
                foreach ($dataInfo as $k => $v){
                    //判断该订单的该条反担保是否存在
                    $estateInfos = TrialEstate::get(['order_sn' => $orderSn,'delete_time' => NULL,'estate_id' => $v,'type' => $type]);
                    if(empty($estateInfos)){
                        $addDatapross['estate_id'] = $v;
                        $addDatapross['order_sn'] = $orderSn;
                        $addDatapross['type'] = $type;
                        $addDatapross['create_time'] = time();
                        $addDatapross['trial_first_id'] = $id;
                        //添加
                        TrialEstate::create($addDatapross);
                    }

                }
            }

            /*
             * @author 赵光帅
             * 更新订单问题和缺少资料的方法
             * @Param {array}  $dataInfo   数据
             * @Param {int}  $type   ；1 更新问题 2 更新缺少资料
             * @Param {string}  $orderSn   订单号
             * @Param {int}  $id   订单初审表主键id
             * */
            protected function updateProblemData($datasInfo,$type,$orderSn,$id){
                if($type === 1){
                    foreach ($datasInfo as $k => $v){
                        if(!empty($v['problem_id'])){  //更新问题
                            $firstsInfos = TrialData::get(['id' => $v['problem_id']]);
                            $firstsInfos->status = $v['problem_status'];
                            $firstsInfos->describe = $v['problem_describe'];
                            $firstsInfos->update_time = time();
                            //更新问题
                            $firstsInfos->save();
                        }else{  //添加问题
                            $addDatapross['describe'] = $v['problem_describe'];
                            $addDatapross['status'] = $v['problem_status'];
                            $addDatapross['order_sn'] = $orderSn;
                            $addDatapross['type'] = 'QUESTION';
                            $addDatapross['create_time'] = time();
                            $addDatapross['trial_first_id'] = $id;
                            //添加
                            TrialData::create($addDatapross);
                        }

                    }
                }else{
                    foreach ($datasInfo as $k => $v){
                        if(!empty($v['data_id'])){ //更新资料
                            $firstsInfos = TrialData::get(['id' => $v['data_id']]);
                            $firstsInfos->status = $v['data_status'];
                            $firstsInfos->describe = $v['data_describe'];
                            $firstsInfos->update_time = time();
                            //更新缺少资料
                            $firstsInfos->save();
                        }else{ //添加资料
                            $addDatapross['describe'] = $v['data_describe'];
                            $addDatapross['status'] = $v['data_status'];
                            $addDatapross['order_sn'] = $orderSn;
                            $addDatapross['type'] = 'NODATA';
                            $addDatapross['create_time'] = time();
                            $addDatapross['trial_first_id'] = $id;
                            //添加
                            TrialData::create($addDatapross);
                        }

                    }
                }

            }

            /*
             * @author 赵光帅
             * 添加反担保和资产证明的方法
             * @Param {array}  $dataInfo   数据
             * @Param {string}  $type   GUARANTEE 添加反担保 ASSETPROOF 添加资产证明
             * @Param {string}  $orderSn   订单号
             * @Param {int}  $id   订单初审表主键id
             * */
            protected function addCollateralassets($dataInfo,$type,$orderSn,$id){
                foreach ($dataInfo as $k => $v){
                    $addDatapross['estate_id'] = $v;
                    $addDatapross['order_sn'] = $orderSn;
                    $addDatapross['type'] = $type;
                    $addDatapross['create_time'] = time();
                    $addDatapross['trial_first_id'] = $id;
                    //添加
                    TrialEstate::create($addDatapross);
                }
            }

	        /*
	         * @author 赵光帅
	         * 添加问题和缺少资料的方法
	         * @Param {array}  $dataInfo   数据
	         * @Param {string}  $type   QUESTION 添加问题 NODATA 添加缺少资料
	         * @Param {string}  $orderSn   订单号
	         * @Param {int}  $id   订单初审表主键id
	         * */
	         protected function addProblemData($dataInfo,$type,$orderSn,$id){
                 foreach ($dataInfo as $k => $v){
                     $addDatapross['describe'] = $v['describe'];
                     $addDatapross['status'] = $v['status'];
                     $addDatapross['order_sn'] = $orderSn;
                     $addDatapross['type'] = $type;
                     $addDatapross['create_time'] = time();
                     $addDatapross['trial_first_id'] = $id;
                     //添加
                     TrialData::create($addDatapross);
                 }
             }

             // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/delProblem 删除问题汇总与缺少资料[admin/Approval/delProblem]
	         * @apiVersion 1.0.0
	         * @apiName delProblem
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/delProblem
	         *
	         *
	         * @apiParam {int}  id   数据的id
	         *
	         */
	        
	        public function delProblem(){
	        	$id = input('id');
                if(empty($id)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, 'id不能为空!');
                $user = TrialData::get($id);
                $user->status = -1;
                $user->delete_time =time();
                $res = $user->save();
                if($res){
                    return $this->buildSuccess("删除成功");
                }else{
                    return $this->buildFailed(ReturnCode::DELETE_FAILED, '删除失败');
                }

	        
	        	 
	        	 
	        }

             // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/delGuarantee 删除房产担保与资产证明[admin/Approval/delGuarantee]
	         * @apiVersion 1.0.0
	         * @apiName delGuarantee
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/delGuarantee
	         *
	         *
	         * @apiParam {int}  id   数据的id
	         *
	         *
	         */
	         
	        public function delGuarantee(){
                $id = input('id');
                if(empty($id)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, 'id不能为空!');
                $user = TrialEstate::get($id);
                $user->status = -1;
                $user->delete_time =time();
                $res = $user->save();
                if($res){
                    return $this->buildSuccess("删除成功");
                }else{
                    return $this->buildFailed(ReturnCode::DELETE_FAILED, '删除失败');
                }
	        	 
	        	 
	        }

	        // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/dataList 缺少的资料列表[admin/Approval/dataList]
	         * @apiVersion 1.0.0
	         * @apiName dataList
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/dataList
	         *
	         *
	         * @apiParam {string}  order_sn   订单编号
	         *
	         * @apiSuccess {string}  describe    资料描述
             * @apiSuccess {int}  status    0未收 1已收
	         */
	         
	        public function dataList(){
	        	$orderSn = input('order_sn');
	        	if(empty($orderSn)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '订单编号不能为空!');
                $trialField = 'id,describe,status';
                $trMap['order_sn'] = $orderSn;
                $trMap['type'] = 'NODATA';
                $trMap['delete_time'] = NULL;
                try{
                    $trialInfo = TrialData::getAll($trMap,$trialField);
                    return $this->buildSuccess($trialInfo);
                }catch (\Exception $e){
                    return $this->buildFailed(ReturnCode::DATA_EXISTS, '查询资料列表失败');
                }

	        	 
	        }

	        // @author 赵光帅
	        /**
	         * @api {post} admin/Approval/addData 提交资料[admin/Approval/addData]
	         * @apiVersion 1.0.0
	         * @apiName addData
	         * @apiGroup Approval
	         * @apiSampleRequest admin/Approval/addData
	         *
	         * @apiParam {arr}  datainfo    数组外层键名
	         * @apiParam {string}  describe    资料描述
	         * @apiParam {int}  status    0未收 1已收
             * @apiParam {int}  id    主键id
	         *
	         */
	        
	        public function addData(){
	        	$zlInfo = input('datainfo');
                /*$zlInfo = array('1'=>array('id' => 20,'describe'=>'缺少房产证','status'=>'1'),
                    '2'=>array('id' => 21,'describe'=>'缺少国土证','status'=>'1')
                );*/
	        	if(empty($zlInfo)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '提交信息不能为空!');
	        	try{
                    foreach ($zlInfo as $k => $v){
                        $trialData = TrialData::get($v['id']);
                        $trialData ->describe = $v['describe'];
                        $trialData ->status = $v['status'];
                        $trialData->save();
                        $order_sn = $trialData['order_sn'];
                    }
                    /*添加订单操作记录*/
                    $stage = "待跟单员补齐资料";
                    $operate = "补齐资料";
                    $operate_node = "待跟单员补齐资料";
                    $operate_det = "出保函时,跟单员将缺少的资料补齐";
                    OrderComponents::addOrderLog($this->userInfo['id'],$order_sn, $stage, $operate,$operate_node,$operate_det);
                    return $this->buildSuccess('修改成功');
                }catch (\Exception $e){
                    return $this->buildFailed(ReturnCode::UPDATE_FAILED, '修改资料列表失败');
                }

	        	 
	        	 
	        }

            // @author 赵光帅
            /**
             * @api {post} admin/Approval/delAttachment 删除附件[admin/Approval/delAttachment]
             * @apiVersion 1.0.0
             * @apiName delAttachment
             * @apiGroup Approval
             * @apiSampleRequest admin/Approval/delAttachment
             *
             * @apiParam {int}   attachment_id   附件表主键id
             *
             */

            public function delAttachment(){
                $attachmentId = input('attachment_id');
                if(empty($attachmentId)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '附件id不能为空!');
                try{
                    //启动事务
                    Db::startTrans();
                    $mentInfo = Attachment::get($attachmentId);
                    $mentInfo->delete_time = time();
                    //在附件表删除该附件
                    $mentInfo->save();

                    //判断该附件是否已经添加到审批信息附件表中
                    $processInfo = TrialProcessAttachment::get(['attachment_id' => $attachmentId]);
                    if(!empty($processInfo)){  //存在就删除
                        $processInfo->delete_time = time();
                        $processInfo->save();
                    }
                    //提交事务
                    Db::commit();
                    return $this->buildSuccess('删除附件成功');
                }catch (\Exception $e){
                    //回滚事务
                    Db::rollback();
                    return $this->buildFailed(ReturnCode::UPDATE_FAILED, '删除附件失败');
                }
            }
	        
	        
}




