<?php

namespace app\model;

use think\Model;
use app\util\Tools;

class CreditInquiry extends Model {

    protected $autoWriteTimestamp = true;
    protected $updateTime = 'update_time';
    protected $createTime = 'create_time';
    // 追加属性
    protected $append = [
        'apply_time_text',
        'sub_bank_time_text',
        'credit_input_time_text'
    ];

    public function getApplyTimeTextAttr($value, $data) {
        $value = $value ? $value : $data['apply_time'];
        return is_numeric($value) ? date("Y-m-d H:i", $value) : $value;
    }

    public function getSubBankTimeTextAttr($value, $data) {
        $value = $value ? $value : $data['sub_bank_time'];
        return is_numeric($value) ? date("Y-m-d H:i", $value) : $value;
    }

    public function getCreditInputTimeTextAttr($value, $data) {
        $value = $value ? $value : $data['credit_input_time'];
        return is_numeric($value) ? date("Y-m-d H:i", $value) : $value;
    }

    /**
     * 新增用户
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @param $data 与数据库字段对应的数组集合
     * @author zhongjiaqi 4.20
     */
    public function addCredit($data) {
        $res = $this->save($data);
        return $flag = $res > 0 ? TRUE : FALSE;
    }

    /**
     * 获取征信报告状态
     * @return 征信报告状态
     * @throws \think\db\exception\DataNotFoundException
     * @param $status  征信报告状态
     * @author zhongjiaqi 4.20
     */
    public function getCheckstatus($status = '') {
        $statusList = ['1' => '待查询', '2' => '正在查询', '3' => '征信报告已出', '4' => '查询失败'];
        return empty($status) ? $statusList : $statusList[$status];
    }
    /**
     * 获取征信报告结果状态
     * @return 征信报告状态
     * @throws \think\db\exception\DataNotFoundException
     * @param $status  征信报告状态
     * @author zhongjiaqi 4.20
     */
    public function getCreditresult($status = '') {
        $statusList = ['1' => '正常', '2' => '异常'];
        return empty($status) ? '暂无' : $statusList[$status];
    }

    /**
     * 更新用户
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @param $data 与数据库字段对应的数组集合  $id 需要更新数据的用户id
     * @author zhongjiaqi 4.21
     */
    public function updateCredit($id, $data) {
        $res = $this->where('id', $id)->update($data);
        return $flag = $res > 0 ? TRUE : FALSE;
    }

    /**
     * 检测当前征信是否可删除或可编辑(只有征信报告查询状态为待查询才可以)
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @param   $id 需要更新数据的用户id
     * @author zhongjiaqi 4.21
     */
    public function checkCredit($id) {
        $res = $this->where('id', $id)->value('checkstatus');
        return $flag = $res = 1 ? TRUE : FALSE;
    }

    /**
     * 处理新增身份证件信息（将身份证和其他证件区分，没有省份证默认其他证件存在certtype和certcode字段）
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @param   $data 证件数据集
     * @author zhongjiaqi 4.21
     */
    public function dealwithCarddata($data) {
        $newarray = array();
        if (count($data) > 1) {
            foreach ($data as $key => $value) {
                if ($value['type'] == 1) {
                    $newarray['certtype'] = 1;
                    $newarray['certcode'] = $value['num'];
                    unset($data[$key]);
                    break;
                }
            }
            //判断是否存在省份证
            if (count($newarray) == 0) {
                $newarray['certtype'] = $data[0]['type'];
                $newarray['certcode'] = $data[0]['num'];
                unset($data[0]);
                $othercert = $data;
            } else {
                foreach ($data as $key => $value) {
                    $othercert[] = $value;
                }
            }
            $newarray['certother'] = json_encode(array_values($othercert), JSON_UNESCAPED_UNICODE);
        } else {
            $newarray['certtype'] = $data[0]['type'];
            $newarray['certcode'] = $data[0]['num'];
        }
        return $newarray;
    }

}
