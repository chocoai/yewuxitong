<?php

/**
 * 用户管理
 * @since   2018-04-16
 * @author
 */

namespace app\admin\controller;

use app\model\SystemAuthGroupAccess;
use app\model\SystemUser;
use app\model\SystemDept;
use app\model\SystemUserData;
use app\util\ReturnCode;
use app\util\Tools;

class User extends Base
{

    /**
     * @api {get} admin/User/index 获取用户列表[admin/User/index]
     * @apiVersion 1.0.0
     * @apiName index
     * @apiGroup User
     * @apiSampleRequest admin/User/index
     * @apiParam {int} keywords    关键字搜索
     * @apiParam {int} page    页码
     * @apiParam {int} size    条数
     * @apiParam {int} status  用户状态
     * @apiParam {int} type  查询类别
     *
     */
    public function index()
    {

        $limit = $this->request->get('size', config('apiBusiness.ADMIN_LIST_DEFAULT'));
        $start = $this->request->get('page', 1);
        $where = [];
        $get = $this->request->get();
        foreach (['num', 'name', 'username', 'mobile', 'ranking', 'status'] as $key) {
            (isset($get[$key]) && $get[$key] !== '') && $where[$key] = ['like', "%{$get[$key]}%"];
        }
        $listObj = (new SystemUser())->where($where)->order('create_time DESC')
            ->paginate($limit, false, ['page' => $start])->toArray();
        $listInfo = $listObj['data'];
        $idArr = array_column($listInfo, 'id');

        $userData = SystemUserData::all(function ($query) use ($idArr) {
            $query->whereIn('uid', $idArr);
        });
        $userData = Tools::buildArrFromObj($userData);
        $userData = Tools::buildArrByNewKey($userData, 'uid');

        $userGroup = SystemAuthGroupAccess::all(function ($query) use ($idArr) {
            $query->whereIn('uid', $idArr);
        });
        $userGroup = Tools::buildArrFromObj($userGroup);
        $userGroup = Tools::buildArrByNewKey($userGroup, 'uid');

        foreach ($listInfo as $key => $value) {
            if (isset($userData[$value['id']])) {
                $listInfo[$key]['lastloginip'] = long2ip($userData[$value['id']]['lastloginip']);
                $listInfo[$key]['logintimes'] = $userData[$value['id']]['logintimes'];
                $listInfo[$key]['lastlogintime'] = date('Y-m-d H:i:s', $userData[$value['id']]['lastlogintime']);
            }
            //$listInfo[$key]['regip'] = long2ip($listInfo[$key]['regip']);
            if (isset($userGroup[$value['id']])) {
                $listInfo[$key]['groupid'] = explode(',', $userGroup[$value['id']]['groupid']);
            } else {
                $listInfo[$key]['groupid'] = [];
            }
        }

        return $this->buildSuccess([
            'list' => $listInfo,
            'count' => $listObj['total']
        ]);
    }

    /**
     * @api {post} admin/User/getUserinfo 获取用户信息[admin/User/getUserinfo]
     * @apiVersion 1.0.0
     * @apiName getUserinfo
     * @apiGroup User
     * @apiSampleRequest admin/User/getUserinfo
     *
     * @apiParam {string} id  用户id
     *
     * @apiSuccess {string} id    用户id
     * @apiSuccess {string} username    用户账号
     * @apiSuccess {string} name    用户姓名
     * @apiSuccess {string} mail    邮箱
     * @apiSuccess {string} num    工号
     * @apiSuccess {string} password    密码
     * @apiSuccess {string} mobile    手机
     * @apiSuccess {string} mail    邮箱
     * @apiSuccess {string} ranking    岗位
     * @apiSuccess {string} remark    备注
     * @apiSuccess {array} deptpath    部门路径
     * @apiSuccess {array} surpath    上级主管信息
     * @apiSuccess {array} groupid    权限组id
     */
    public function getUserinfo()
    {
        $id = $this->request->get('id', '');
        if ($id) {
            $data = (new SystemUser())->where('id', $id)->field('id,deptid,username,superid,superman,name,num,name,password,mobile,email,ranking,gender,remark')->find()->toArray();
            $data['deptpath'] = array_column((new SystemDept())->getFullpath($data['deptid']), 'id');
            $superdept = (new SystemDept())->getUpdept($data['deptid']);
            $data['surpath'] = ['name' => $data['superman'], 'deptname' => $superdept['name']];
            $data['groupid'] = (new SystemAuthGroupAccess())->where('uid', $id)->column('groupid');
            return $this->buildSuccess($data);
        }
        return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '参数有误！');
    }

    /**
     * @api {post} admin/User/add 新增用户[admin/User/add]
     * @apiVersion 1.0.0
     * @apiName add
     * @apiGroup User
     * @apiSampleRequest admin/User/add
     *
     * @apiParam {string} username  用户账号
     * @apiParam {array} groupid  权限ID
     * @apiParam {string} name  真实姓名
     * @apiParam {string} num       工号
     * @apiParam {string} mobile    手机
     * @apiParam {string} mail      邮箱
     * @apiParam {string} ranking   职位
     * @apiParam {int} gender   性别（0未知 1 男 2女）
     * @apiParam {string} deptpath   部门全路径
     * @apiParam {string} superid   上级主管id
     * @apiParam {string} superman   上级主管名字
     * @apiParam {string} remark   备注
     *
     */
    public function add()
    {
        $groups = '';
        $postData = $this->request->post();
        $msg = $this->validate($postData, 'AddUser');
        if ($msg !== true)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $msg);
        $postData['create_by'] = $this->userInfo['id'];
        if (empty($postData['create_by']))
            return $this->buildFailed(ReturnCode::UNKNOWN, '登录过期，请重新登录');
        //数据验证(不能有相同工号，不能有相同联系电话，如果遇到相同名字的自动后面加对应数字)
        $checkdata = (new SystemUser())->checkSameuser($postData['name'], $postData['mobile'], $postData['num']);
        if ($checkdata['code'] == 1) {
            return $this->buildFailed(ReturnCode::ADD_FAILED, $checkdata['msg']);
        } else {
            $postData['name'] = $checkdata['name'];
        }
        //其他数据处理
        $postData['deptid'] = $postData['deptpath'][count($postData['deptpath']) - 1];
        $postData['deptname'] = (new SystemDept())->where('id', $postData['deptid'])->value('name');
        $data = (new SystemDept())->getFullpath($postData['deptid']);
        foreach ($data as $value) {
            $ids [] = '[' . $value['id'] . ']';
        }
        $postData['deptpath'] = implode(',', $ids);
        $postData['deptallname'] = implode('/', array_column($data, 'name'));
        foreach ((new SystemUser())->getFullpath($postData['superid']) as $value) {
            $idss [] = '[' . $value . ']';
        }
        $postData['superpath'] = implode(',', $idss);
        $postData['create_time'] = time();
        $postData['password'] = Tools::userMd5($postData['password']); //密码加密
        if ($postData['groupid']) {
            $groups = trim(implode(',', $postData['groupid']), ',');
        }
        unset($postData['groupid']);
        $res = SystemUser::create($postData);
        if ($res === false) {
            return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '操作失败');
        } else {
            SystemAuthGroupAccess::create([
                'uid' => $res->id,
                'system_id' => 1,
                'groupid' => $groups
            ]);

            return $this->buildSuccess([]);
        }
    }

    /**
     * @api {get} admin/User/getUsers 获取当前组的全部用户[admin/User/getUsers]
     * @apiVersion 1.0.0
     * @apiName getUsers
     * @apiGroup User
     * @apiSampleRequest admin/User/getUsers
     * @apiParam {int} page    页码
     * @apiParam {int} size    条数
     * @apiParam {int} gid     分组id
     *
     */
    public function getUsers()
    {
        $limit = $this->request->get('size', config('apiBusiness.ADMIN_LIST_DEFAULT'));
        $start = $this->request->get('page', 1);
        $gid = $this->request->get('gid', 0);
        if (!$gid) {
            return $this->buildFailed(ReturnCode::PARAM_INVALID, '非法操作');
        }

        $listInfo = (new SystemAuthGroupAccess())->where(['groupid' => ['like', "%{$gid}%"]])->select();
        $listInfo = Tools::buildArrFromObj($listInfo);
        $uidArr = array_column($listInfo, 'uid');

        $listObj = (new SystemUser())->whereIn('id', $uidArr)->order('create_time DESC')
            ->paginate($limit, false, ['page' => $start])->toArray();
        $userInfo = $listObj['data'];

        $userData = SystemUserData::all(function ($query) use ($uidArr) {
            $query->whereIn('uid', $uidArr);
        });
        $userData = Tools::buildArrFromObj($userData);
        $userData = Tools::buildArrByNewKey($userData, 'uid');

        foreach ($userInfo as $key => $value) {
            if (isset($userData[$value['id']])) {
                $userInfo[$key]['lastloginip'] = long2ip($userData[$value['id']]['lastloginip']);
                $userInfo[$key]['logintimes'] = $userData[$value['id']]['logintimes'];
                $userInfo[$key]['lastlogintime'] = date('Y-m-d H:i:s', $userData[$value['id']]['lastlogintime']);
            }
            //$userInfo[$key]['regip'] = long2ip($userInfo[$key]['regip']);
        }

        return $this->buildSuccess([
            'list' => $userInfo,
            'count' => $listObj['total']
        ]);
    }

    /**
     * @api {get} admin/User/changeStatus 用户状态编辑[admin/User/changeStatus]
     * @apiVersion 1.0.0
     * @apiName changeStatus
     * @apiGroup User
     * @apiSampleRequest admin/User/changeStatus
     * @apiParam {string}  id       用户id
     * @apiParam {string}  status   状态
     *
     */
    public function changeStatus()
    {
        $id = $this->request->get('id');
        $status = $this->request->get('status');
        $res = SystemUser::update([
            'id' => $id,
            'status' => $status,
            'update_time' => time(),
        ]);
        if ($res === false) {
            return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '操作失败');
        } else {
            return $this->buildSuccess([]);
        }
    }

    /**
     * @api {post} admin/User/edit 编辑用户[admin/User/edit]
     * @apiVersion 1.0.0
     * @apiName edit
     * @apiGroup User
     * @apiSampleRequest admin/User/edit
     *
     * @apiParam {int}     id         用户id
     * @apiParam {string}  password   密码
     * @apiParam {array} groupid  权限ID
     * @apiParam {string} name  真实姓名
     * @apiParam {string} num       工号
     * @apiParam {string} mobile    手机
     * @apiParam {string} mail      邮箱
     * @apiParam {string} ranking   职位
     * @apiParam {int} gender   性别（1 男 2女）
     * @apiParam {string} deptpath   部门全路径
     * @apiParam {string} superid   上级主管id
     * @apiParam {string} superman   上级主管名字
     * @apiParam {string} remark   备注
     *
     */
    public function edit()
    {
        $groups = '';
        $postData = $this->request->post();
        $msg = $this->validate($postData, 'AddUser');
        if ($msg !== true)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $msg);
        //数据验证(不能有相同工号，不能有相同联系电话，如果遇到相同名字的自动后面加对应数字)
        $checkdata = (new SystemUser())->checkSameuser($postData['name'], $postData['mobile'], $postData['num'], $postData['id']);
        if ($checkdata['code'] == 1) {
            return $this->buildFailed(ReturnCode::ADD_FAILED, $checkdata['msg']);
        } else {
            $postData['name'] = $checkdata['name'];
        }
        if ($postData['password'] === 'Admin') {
            unset($postData['password']);
        } else {
            $postData['password'] = Tools::userMd5($postData['password']);
        }
        if ($postData['groupid']) {
            $groups = trim(implode(',', $postData['groupid']), ',');
        }
        $postData['update_time'] = time();
        unset($postData['groupid']);
        unset($postData['surpath']);
        //其他数据处理
        $postData['deptid'] = $postData['deptpath'][count($postData['deptpath']) - 1];
        $postData['deptname'] = (new SystemDept())->where('id', $postData['deptid'])->value('name');
        $data = (new SystemDept())->getFullpath($postData['deptid']);
        foreach ($data as $value) {
            $ids [] = '[' . $value['id'] . ']';
        }
        $postData['deptpath'] = !empty($ids) ? implode(',', $ids) : null;
        $postData['deptallname'] = implode('/', array_column($data, 'name'));
        foreach ((new SystemUser())->getFullpath($postData['superid']) as $value) {
            $idss [] = '[' . $value . ']';
        }
        $postData['superpath'] = !empty($idss) ? implode(',', $idss) : null;
        $res = SystemUser::update($postData, $where = ['id' => $postData['id']]);
        if ($res === false) {
            return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '操作失败');
        } else {
            $has = SystemAuthGroupAccess::get(['uid' => $postData['id']]);
            if ($has) {
                SystemAuthGroupAccess::update([
                    'groupid' => $groups
                ], [
                    'uid' => $postData['id'],
                ]);
            } else {
                SystemAuthGroupAccess::create([
                    'uid' => $postData['id'],
                    'system_id' => 1,
                    'groupid' => $groups
                ]);
            }
            return $this->buildSuccess([]);
        }
    }

    /**
     * @api {post} admin/User/own 修改个人信息[admin/User/own]
     * @apiVersion 1.0.0
     * @apiName own
     * @apiGroup User
     * @apiSampleRequest admin/User/own
     * @apiParam {string}  headimg       用户头像
     * @apiParam {string}  oldPassword   旧密码
     * @apiParam {string}  password      新密码
     *
     */
    public function own()
    {
        $postData = $this->request->post();
        if ($postData['password'] && $postData['oldPassword']) {
            $oldPass = Tools::userMd5($postData['oldPassword']);
            unset($postData['oldPassword']);
            if ($oldPass === $this->userInfo['password']) {
                $postData['password'] = Tools::userMd5($postData['password']);
            } else {
                return $this->buildFailed(ReturnCode::INVALID, '原始密码不正确');
            }
        } else {
            unset($postData['password']);
            unset($postData['oldPassword']);
        }
        $postData['id'] = $this->userInfo['id'];
        $postData['update_time'] = time();
        $res = SystemUser::update($postData);
        if ($res === false) {
            return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '操作失败');
        } else {
            return $this->buildSuccess([]);
        }
    }

    /**
     * @api {get} admin/User/del 删除用户[admin/User/del]
     * @apiVersion 1.0.0
     * @apiName del
     * @apiGroup User
     * @apiSampleRequest admin/User/del
     * @apiParam {int}  id   用户编号
     *
     */
    // public function del() {
    //     $id = $this->request->get('id');
    //     if (!$id) {
    //         return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '缺少必要参数');
    //     }
    //     SystemUser::destroy($id);
    //     SystemAuthGroupAccess::destroy(['uid' => $id]);
    //     return $this->buildSuccess([]);
    // }
    // @author 林桂均
    /**
     * @api {post} admin/User/userSearch 模糊匹配用户获取部门[admin/User/userSearch]
     * @apiVersion 1.0.0
     * @apiName userSearch
     * @apiGroup User
     * @apiSampleRequest admin/User/userSearch
     * @apiParam {string}  name   用户编号
     *
     */
    public function userSearch()
    {
        $name = $this->request->post('name');
        if (empty($name)) {
            return $this->buildFailed(ReturnCode::PARAM_INVALID, '缺少参数!' . $name . '111');
        }
        return $this->buildSuccess(SystemUser::userSearch($name));
    }

    // @author 林桂均

    /**
     * @api {post} admin/User/userByDeptId 通过部门获取用户[admin/User/userByDeptId]
     * @apiVersion 1.0.0
     * @apiName userByDeptId
     * @apiGroup User
     * @apiSampleRequest admin/User/userByDeptId
     * @apiParam {int}  deptId   部门id
     * @apiParam {int}  isManager   是否部门经理 1代表查理财经理 0代表否
     * @apiParam {int}  name   用户名称
     */
    public function userByDeptId()
    {
        $deptId = input('post.deptId', 0, 'int');
        $isManager = input('post.isManager', 0, 'int');
        $name = input('post.name', '');
        if (!$deptId)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, '缺少参数或者参数格式有误!');
        //获取部门下所有用户
        if ($isManager === 0) {
            $condition['status'] = 1;
            $condition['is_deleted'] = 0;
            $name !== '' && $condition['name'] = ['like', '%' . $name . '%'];
            $condition['deptpath'] = ['like', '%[' . $deptId . ']%'];
            $result = SystemUser::where($condition)->field('name,id,deptid,deptname,superid')->select();
            return $this->buildSuccess($result);
        }

        $condition = [];
        $name !== '' && $condition['a.name'] = ['like', '%' . $name . '%'];
        $result = SystemUser::getDeptManager($condition, 'a.name,a.id,deptid,a.deptname,a.superid', $deptId, $this->auth_group['investment_advisor']);
        if ($result !== false)
            return $this->buildSuccess($result);
        return $this->buildFailed(ReturnCode::DB_READ_ERROR, '用户读取失败!');
    }


}
