<?php
/**
 * Created by PhpStorm.
 * User: 赵光帅
 * Date: 2018/8/14
 * Time: 17:02
 */
namespace app\admin\controller;

use app\util\ReturnCode;
use think\Db;
use think\Loader;
use app\model\OrderOther;
use app\model\OrderOtherAccount;
use app\util\OrderComponents;
use app\model\Dictionary;

class CostApply extends Base {
    private $orderother;
    private $orderotheraccount;
    private $process_type; //费用申请类型
    private $time;
    private $id;  //其他业务表id
    private $checkData = array(
        'costInfo' => [], //申请信息
        'accountInfo' => [], //账户信息
    ); //校验数据

    public function _initialize() {
        parent::_initialize();
        $this->orderother = new OrderOther();
        $this->orderotheraccount = new OrderOtherAccount();
    }

    /**
     * @api {post} admin/CostApply/addCostApply 添加费用申请[admin/CostApply/addCostApply]
     * @apiVersion 1.0.0
     * @apiName addCostApply
     * @apiGroup CostApply
     * @apiSampleRequest admin/CostApply/addCostApply
     *
     * @apiParam {int}  process_type   添加类型 1信息费支付 2首期转账 3退保证金 4现金按天退担保费 5额度退担保费
     * @apiParam {string}  order_sn   订单编号
     * @apiParam {int}  loan_way   放款方式 1转账
     * @apiParam {int}  transfer_type   到账类型 1实时 2普通
     * @apiParam {float}   info_fee_rate  信息费费率
     * @apiParam {int}  info_foo   信息费金额
     * @apiParam {string}  collector  信息费收取人
     * @apiParam {int}  mobile  联系电话
     * @apiParam {string}  reason  支付原因(申请原因)
     * @apiParam {arr}  attachment  附件材料[1,2,3]
     * @apiParam {int}  order_type  订单类型 1内单 2外单
     *
     * @apiParam {array} accountinfo  支付账户信息(具体参数在下面)
     * @apiParam {string}   bank_account  银行户名
     * @apiParam {string}  bank_card   银行卡号
     * @apiParam {string}  bank  开户银行
     * @apiParam {string}  bank_branch  开户支行
     * @apiParam {float}  money  信息费(支付金额) 首期款(转账金额) 保证金(应退金额) 按天退担保费(应退担保金额) 额度退担保费(退款金额)
     * @apiParam {int}  account_type  账户类型 1业主 2客户 3收款确定书
     * @apiParam {int}  account_source  账户来源 1合同 2财务确认书 3其他
     * @apiParam {float}  exhibition_fee  应退展期费(按天退担保费申请专有)
     */

    public function addCostApply(){
        $this->process_type = input('process_type/d', null, 'trim');
        $this->time = time();
        if(!in_array($this->process_type,[1,2,3,4,5])) return $this->buildFailed(ReturnCode::PARAM_INVALID, '无效的添加类型!');
        //校验申请信息
        $resAppinfo = $this->checkApplicationinfo();
        if ($resAppinfo !== true)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $resAppinfo);

        //校验账户信息
        $resAccinfo = $this->checkAccountinfo();
        if ($resAccinfo !== true)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $resAccinfo);

        $costInfo = $this ->checkData['costInfo'];
        Db::startTrans();
        try{
            $costInfo['process_sn'] = $this->getProcesssn();
            if($costInfo['process_sn'] === false){
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '流程编号生成失败');
            }

            $costInfo['money'] = 0;  //初始支付金额
            $costInfo['stage'] = 10001; //初始状态
            $costInfo['create_uid'] = $this->userInfo['id'];
            $costInfo['create_time'] = $costInfo['update_time'] = $this->time;
            //添加申请信息
            if (($this->id = $this->orderother->insertGetId($costInfo)) === false) {
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '申请信息添加失败');
            }

            //添加支付账户信息
            $accountInfo = $this->addAccount();
            if ($accountInfo !== 1) {
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, $accountInfo);
            }

            //添加附件
            $attachmentInfo = $this->addAttachment();
            if ($attachmentInfo !== 1) {
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, $attachmentInfo);
            }

            Db::commit();
            return $this->buildSuccess();

        }catch (\Exception $e){
            Db::rollback();
            trace('费用申请错误信息', $e->getMessage());
            return $this->buildFailed(ReturnCode::UPDATE_FAILED, '费用申请添加失败'.$e->getMessage());
        }
    }

    //添加附件
    private function addAttachment() {
        $attach = $this->request->post('attachment/a');
        if (isset($attach) && !empty($attach)) {
            $attachArr = [];
            foreach ($attach as $key => $att) {
                $attachArr[$key]['order_other_id'] = $this->id;
                $attachArr[$key]['attachment_id'] = $att;
                $attachArr[$key]['create_time'] = $this->time;
            }
            if (Db::name('order_other_attachment')->insertAll($attachArr) > 0) {
                unset($attachArr);
                return 1;
            }
            unset($attachArr);
            return '附件添加失败';
        } else {
            return 1;
        }
    }

    /**
     * 添加账户信息
     * @return int|string
     * @throws \Exception
     */
    private function addAccount() {
        $accountInfo = array_map(function($v) {
            $v['order_other_id'] = $this->id;
            $v['create_uid'] = $this->userInfo['id'];
            $v['create_time'] = $v['update_time'] = $this->time;
            return $v;
        }, $this ->checkData['accountInfo']);
        if ($this->orderotheraccount->saveAll($accountInfo) > 0) {
            unset($accountInfo);
            return 1;
        }
        unset($accountInfo);
        return '账户信息添加失败';
    }

    /*
     * 生成流程编号
     *
     */
    private function getProcesssn(){
        $date = date('Ymd',time());
        $process_sn = $this->orderother->where(['process_sn' => ['like',$date.'%']])->order('id desc')->value('process_sn');
        if($process_sn){
            return $process_sn + 1;
        }else{
            return $date.'0001';
        }

    }


    /**
     * 校验信息费申请信息
     * @return array
     */
    private function checkApplicationinfo() {
        //验证申请信息
        $applicData['order_sn'] = $this->request->post('order_sn'); //订单编号
        $applicData['process_type'] = $this->DeliveryStatus(); //流程类型
        $applicData['loan_way'] = $this->request->post('loan_way'); //放款方式
        $applicData['transfer_type'] = $this->request->post('transfer_type'); //到账类型
        $applicData['reason'] = $this->request->post('reason');
        if($this->process_type === 1){
            $applicData['info_fee_rate'] = $this->request->post('info_fee_rate'); //信息费费率
            $applicData['info_foo'] = $this->request->post('info_foo');   //信息费金额
            $applicData['collector'] = $this->request->post('collector');  //信息费收取人
            $applicData['mobile'] = $this->request->post('mobile');
            $validate = loader::validate('ValidCost');
            if (!$validate->scene('addinfocosts')->check($applicData)) {
                return $validate->getError();
            }

        }else{
            $applicData['order_type'] = $this->request->post('order_type');
            $validate = loader::validate('ValidCost');
            if (!$validate->scene('addotherinfo')->check($applicData)) {
                return $validate->getError();
            }

        }

        //验证是否存在该订单
        $orderid = Db::name('order')->where(['order_sn' => $applicData['order_sn'],'status' => 1])->value('id');
        if(empty($orderid)) return "该订单不存在";

        $this->checkData['costInfo'] = $applicData;
        unset($applicData);
        return true;
    }

    /**
     * 添加类型
     * @param $type
     * @return string
     */
    private function DeliveryStatus() {
        switch ($this->process_type) {
            case 1 :
                return 'INFO_FEE';
                break;
            case 2 :
                return 'SQ_TRANSFER';
                break;
            case 3 :
                return 'DEPOSIT';
                break;
            case 4 :
                return 'XJ_GUARANTEE_FEE';
                break;
            case 5 :
                return 'ED_GUARANTEE_FEE';
                break;
            default:
                return '';
        }
    }

    /**
     * 校验信息费账户信息
     */
    private function checkAccountinfo() {
        //验证账户信息
        $accountData= input('post.accountinfo/a');
        $validate = loader::validate('ValidCost');

        if($this->process_type === 1){
            foreach ($accountData as $k => $v){
                if (!$validate->scene('infozccount')->check($v)) {
                    return $validate->getError();
                }
            }

        }elseif (in_array($this->process_type,[2,3,5])){
            foreach ($accountData as $k => $v) {
                if (!$validate->scene('qitaaccount')->check($v)) {
                    return $validate->getError();
                }
            }

        }else{
            foreach ($accountData as $k => $v) {
                if (!$validate->scene('cashaccount')->check($v)) {
                    return $validate->getError();
                }
            }

        }

        $this->checkData['accountInfo'] = $accountData;
        unset($accountData);
        return true;
    }

    /**
     * @api {post} admin/CostApply/infoCostList 信息费支付申请(管理)列表[admin/CostApply/infoCostList]
     * @apiVersion 1.0.0
     * @apiName infoCostList
     * @apiGroup CostApply
     * @apiSampleRequest admin/CostApply/infoCostList
     *
     *
     * @apiParam {int} create_uid    人员id
     * @apiParam {int} subordinates    1含下属 0不含下属
     * @apiParam {int}  start_time   开始时间
     * @apiParam {int}  end_time   结束时间
     * @apiParam {int}  stage   审批状态
     * @apiParam {int} search_text    关键字搜索
     * @apiParam {int} page    页码
     * @apiParam {int} limit    条数
     *
     * @apiSuccessExample {json} 返回数据示例:
     * HTTP/1.1 200 OK
     *
     * "data": {
        "total": 3,
        "per_page": 10,
        "current_page": 1,
        "last_page": 1,
        "data": [
                {
                "id": 8                          其他业务表主键id
                "process_sn": "201808150008",   流程单号
                "order_sn": "DQJK2018070004",   业务单号
                "finance_sn": "100000023",      财务编号
                "type": "DQJK",                 业务类型
                "estate_name": null,           房产名称
                "estate_owner": null,          业主姓名
                "money": "0.00",               支付金额
                "stage": "10001",
                "create_time": "2018-08-15 20:26:11",   申请时间
                "name": "管理员"                        申请人
                },
                {
                "process_sn": "201808150007",
                "order_sn": "PDXJ2018070002",
                "finance_sn": "100000011",
                "type": "PDXJ",
                "estate_name": "大芬油画苑C栋0单元902",
                "estate_owner": "毛淑荣",
                "money": "0.00",
                "stage": "10001",
                "create_time": "2018-08-15 20:25:52",
                "name": "管理员"
                }
            ]
         }
     *
     */

    public function infoCostList(){
        $createUid = $this->request->post('create_uid',0,'int');
        $subordinates = $this->request->post('subordinates',0,'int');
        $startTime = strtotime($this->request->post('start_time'));
        $endTime = strtotime($this->request->post('end_time'));
        $stage = $this->request->post('stage','','int');
        $searchText = $this->request->post('search_text','','trim');
        $page = input('page') ? input('page') : 1;
        $pageSize = input('limit') ? input('limit') : config('apiBusiness.ADMIN_LIST_DEFAULT');

        $map = [];
        if ($createUid) {
            if ($subordinates == 1) {
                $userStr = SystemUser::getOrderPowerStr($createUid);
            } else {
                $userStr = $createUid;
            }
            $map['o.financing_manager_id'] = ['in', $userStr];
        }

        if($startTime && $endTime){
            if($startTime > $endTime){
                $startTime = $startTime+86399;
                $map['x.create_time'] = array(array('egt', $endTime), array('elt', $startTime));
            }else{
                $endTime = $endTime+86399;
                $map['x.create_time'] = array(array('egt', $startTime), array('elt', $endTime));
            }
        }elseif($startTime){
            $map['x.create_time'] = ['egt',$startTime];
        }elseif($endTime){
            $endTime = $endTime+86399;
            $map['x.create_time'] = ['elt',$endTime];
        }

        $stage && $map['x.stage'] = $stage;
        $searchText && $map['x.order_sn|x.process_sn|y.estate_name'] = ['like', "%{$searchText}%"];

        $map['x.status'] = 1;
        $map['x.delete_time'] = null;
        $field = 'x.id,x.process_sn,o.order_sn,o.finance_sn,o.type,y.estate_name,y.estate_owner,x.money,x.stage,x.create_time,z.name';
        try{
            return $this->buildSuccess(OrderOther::infoPayList($map,$field,$page,$pageSize));
        }catch (\Exception $e){
            return $this->buildFailed(ReturnCode::RECORD_NOT_FOUND, '查询失败!'.$e->getMessage());
        }
    }


    /**
     * @api {post} admin/CostApply/costApplyDetail 信息费支付(首期款转账,退保证金,按天,额度退担保)详情[admin/CostApply/costApplyDetail]
     * @apiVersion 1.0.0
     * @apiName costApplyDetail
     * @apiGroup CostApply
     * @apiSampleRequest admin/CostApply/costApplyDetail
     *
     * @apiParam {int}  id   其他业务表主键id
     *
     * @apiSuccessExample {json} 返回数据示例:
     * HTTP/1.1 200 OK
     *
     * "data": {
            "orderinfo": {                        订单基本信息
                "order_sn": "JYDB2018070002",       业务单号
                "finance_sn": "100000001",          财务编号
                "money": "7800000.00",              担保金额
                "order_source": 2,
                "source_info": "中原地产",           来源机构
                "name": "梁小健",                    理财经理
                "sname": "担保业务02部",             所属部门
                "estateinfo": "绿海湾花园A座1单元1601,绿海湾花园A座1单元1601a",    房产名称
                "order_source_str": "银行介绍",                 业务来源
                "costomerinfo": "杨丽娟,梁玉生,孙士钧,刘佩铃"       担保申请人
                 "paymatters": "首期款转账",                        付款事项
                 "estateOwner": "杨丽娟,杨丽娟",                    业主姓名
                 "associated": "TMXJ2018070003,JYXJ2018070005,JYXJ2018070006"  关联订单
                 "ac_deposit": "1.00",                      实收保证金
                 "ac_guarantee_fee": "62400.00",            担保费(实收担保费)
                "ac_fee": "0.00",                           手续费
                "ac_exhibition_fee": "0.00",                展期费
                "ac_overdue_money": "0.00",                 逾期金额
                 "guarantee_rate": 0.8,                     担保费率
            }
             "applyforinfo": {                     申请信息
                "id": 10,                               其他业务表主键id
                "process_sn": "201808150008",           流程编码
                "order_type": null,                     订单类型 1内单 2外单
                "loan_way": 1,                          放款方式 1转账
                "transfer_type": 1,                     到账类型 1实时 2普通
                "info_fee_rate": 0.55,                  信息费费率
                "info_foo": "10523.00",                 信息费金额
                "collector": "张三",                    信息费收取人
                "mobile": "18529113254",                联系电话
                "reason": "测试元原因",                 支付原因(申请原因)
                "attachment": [                         附件材料
                        {
                        "id": 5,                        附件id
                        "url": "/uploads/20180717/7a07d619c7f9ffb82527db5d386513e5.png",   附件地址
                        "name": "毕圆明.png",                 附件名称
                        "thum1": "uploads/thum/20180717/7a07d619c7f9ffb82527db5d386513e5.png",  附件缩略图地址
                        "ext": "png"                          附件后缀
                        },
                        {
                        "id": 6,
                        "url": "/uploads/20180717/36a1b7c84079d280c9f6058c98bf1659.jpg",
                        "name": "身份证复印件.jpg",
                        "thum1": "uploads/thum/20180717/36a1b7c84079d280c9f6058c98bf1659.jpg",
                        "ext": "jpg"
                        }
                    ]
            }
             "accountinfo": [                支付账户(退费账户)信息
                {
                "id": 11,                     账户信息id
                "bank_account": "张三",       银行户名
                "account_type": 1,            账户类型 1业主 2客户 3收款确定书
                "account_source": 1,          账户来源 1合同 2财务确认书 3其他
                "bank_card": "4521368",       银行卡号
                "bank": "中国银行",            开户银行
                "bank_branch": "车公庙支行",   开户支行
                "money": "12458.00",           支付金额(信息费) 转账金额(首期款转账) 应退金额(退保证金) 应退担保金额(现金按天退) 退款金额(额度退担保费)
                "exhibition_fee": "12345.00",  应退展期费(现金按天退专有)
                "actual_payment": null,      实付金额(信息费) 实转金额(首期款转账) 实退金额(退保证金，现金按天退，额度退担保费)
                "expense_taxation": null     扣税费用(信息费)  手续费(首期款转账,退保证金，现金按天退，额度退担保费)
                },
                {
                "bank_account": "李四",
                "account_type": 2,
                "account_source": 3,
                "bank_card": "123445",
                "bank": "中国农业银行",
                "bank_branch": "车公庙支行",
                "money": "1456.00",
                "exhibition_fee": "23456.00",
                "actual_payment": null,
                "expense_taxation": null
                }
            ]
         "dpInfo": {                               首期款信息
            "dp_strike_price": "5900000.00",             成交价格
            "dp_earnest_money": "80000.00",             定金金额
            "dp_money": null,                          首期款金额
            "dp_supervise_bank": "建设银行",           资金监管银行
            "dp_supervise_bank_branch": null,          资金监管支行
            "dp_supervise_date": "2018-04-24",         监管日期
            "dp_buy_way": "按揭购房",                  购房方式  1全款购房2按揭购房
            "dp_now_mortgage": "5.00"                  现按揭成数
            }
         "mortgage_info": [                               现按揭信息
                {
                "type": "NOW",
                "mortgage_type": 1,
                "money": "900000.00",                     现按揭金额
                "organization_type": "1",
                "organization": "建设银行-深圳振兴支行",     现按揭机构
                "mortgage_type_str": "公积金贷款",           现按揭类型
                "organization_type_str": "银行"         现按揭机构类型
                },
                {
                "type": "NOW",
                "mortgage_type": 2,
                "money": "2050000.00",
                "organization_type": "1",
                "organization": "建设银行-深圳振兴支行",
                "mortgage_type_str": "商业贷款",
                "organization_type_str": "银行"
                }
            ]
         "estate_info": [   房产信息
                {
                "estate_name": "国际新城一栋",                  房产名称
                "estate_region": "深圳市|罗湖区|桂园街道",      所属城区
                "estate_area": 70,                             房产面积
                "estate_owner": "杨丽娟",                       产权人
                "estate_certtype": 1,                          产证类型
                "estate_certnum": 11111,                       产证编码
                "house_type": 1                                房产类型 1分户 2分栋
                },
                {
                "estate_name": "国际新城一栋",
                "estate_district": "440303",
                "estate_area": 70,
                "estate_certtype": 1,
                "estate_certnum": 11111,
                "house_type": 1
                }
            ],
         "advance_info": [              担保费信息
                {
                "advance_money": "12000000.00",  垫资金额
                "advance_day": 5,                垫资天数
                "advance_rate": 0.06,            垫资费率
                "advance_fee": "36000.0",        垫资费
                "remark": "",                    备注说明
                "id": 3
                }
            ]
        }
     *
     */

    public function costApplyDetail(){
        $id = $this->request->Post('id', null, 'int');
        if(empty($id)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '参数不能为空');

        $otherInfo = $this->orderother->where(['id' => $id])->field('order_sn,process_type')->find();
        if(empty($otherInfo)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '不存在此条费用申请信息!');

        try{
            $returnInfo = [];
            //获取订单基本信息
            $returnInfo['orderinfo'] = $this->orderother->getOrderInfo($otherInfo['process_type'],$otherInfo['order_sn']);

            //获取申请信息
            $returnInfo['applyforinfo'] = $this->orderother->getApplyInfo($id);

            //获取支付账户信息(退费账户信息)
            $returnInfo['accountinfo'] = $this->orderother->getAccountsInfo($id);

            if($otherInfo['process_type'] == 'SQ_TRANSFER'){
                //获取首期款信息
                $returnInfo['dpInfo'] = OrderComponents::orderDp($otherInfo['order_sn'], 'dp_strike_price,dp_earnest_money,dp_money,dp_supervise_bank,dp_supervise_bank_branch,dp_buy_way,dp_now_mortgage,dp_supervise_date');

                //现按揭信息
                $mortgageInfo = OrderComponents::showMortgage($otherInfo['order_sn'], 'type,mortgage_type,money,organization_type,organization','NOW');
                $newMortgageArr = dictionary_reset((new Dictionary)->getDictionaryByType('MORTGAGE_TYPE'));
                $newAgencyArr = dictionary_reset((new Dictionary)->getDictionaryByType('MORTGAGE_AGENCY_TYPE '));
                if (!empty($mortgageInfo)) {
                    foreach ($mortgageInfo as $k => $v){
                        $mortgageInfo[$k]['mortgage_type_str'] = $newMortgageArr[$v['mortgage_type']] ? $newMortgageArr[$v['mortgage_type']] : '';
                        $mortgageInfo[$k]['organization_type_str'] = $newAgencyArr[$v['organization_type']] ? $newAgencyArr[$v['organization_type']] : '';
                    }
                }
                $returnInfo['mortgage_info'] = $mortgageInfo;
            }

        if($otherInfo['process_type'] == 'DEPOSIT'){
            //获取房产信息
            $estateInfo = OrderComponents::showEstateList($otherInfo['order_sn'],'estate_name,estate_region,estate_area,estate_owner,estate_certtype,estate_certnum,house_type','DB');
            $newStageArr =  dictionary_reset((new Dictionary)->getDictionaryByType('PROPERTY_TYPE'));
            if($estateInfo){
                foreach($estateInfo as $k => $val){
                    $estateInfo[$k]['estate_certtype_str'] = $newStageArr[$val['estate_certtype']] ? $newStageArr[$val['estate_certtype']]:'';
                }
            }
            $returnInfo['estate_info'] = $estateInfo;
        }

        if($otherInfo['process_type'] == 'XJ_GUARANTEE_FEE'){
            //担保费信息
            $advanceInfo = OrderComponents::advanceMoney($otherInfo['order_sn']);
            $returnInfo['advance_info'] = $advanceInfo;
        }




            return $this->buildSuccess($returnInfo);
        }catch (\Exception $e){
            return $this->buildFailed(ReturnCode::UPDATE_FAILED, '银行账户更新失败'.$e->getMessage());
        }
    }


    /**
     * @api {post} admin/CostApply/costApprovalDetail 费用申请审批详情[admin/CostApply/costApprovalDetail]
     * @apiVersion 1.0.0
     * @apiName costApprovalDetail
     * @apiGroup CostApply
     * @apiSampleRequest admin/CostApply/costApprovalDetail
     *
     * @apiParam {int}  id   其他业务表主键id
     *
     * @apiSuccessExample {json} 返回数据示例:
     * HTTP/1.1 200 OK
     *
     * "data": {
    "orderinfo": {                    订单基本信息
    "order_sn": "JYDB2018070002",       业务单号
    "finance_sn": "100000001",          财务编号
    "money": "7800000.00",              担保金额
    "order_source": 2,
    "source_info": "中原地产",           来源机构
    "name": "梁小健",                    理财经理
    "sname": "担保业务02部",             所属部门
    "estateinfo": "绿海湾花园A座1单元1601,绿海湾花园A座1单元1601a",    房产名称
    "order_source_str": "银行介绍",                 业务来源
    "costomerinfo": "杨丽娟,梁玉生,孙士钧,刘佩铃"       担保申请人
    "paymatters": "首期款转账",                        付款事项
    "estateOwner": "杨丽娟,杨丽娟",                    业主姓名
    "associated": "TMXJ2018070003,JYXJ2018070005,JYXJ2018070006"  关联订单
    "ac_deposit": "1.00",                      实收保证金
    "ac_guarantee_fee": "62400.00",            担保费(实收担保费)
    "ac_fee": "0.00",                           手续费
    "ac_exhibition_fee": "0.00",                展期费
    "ac_overdue_money": "0.00",                 逾期金额
    "guarantee_rate": 0.8,                     担保费率
    }
    "applyforinfo": {                   申请信息
    "id": 10,                               其他业务表主键id
    "process_sn": "201808150008",           流程编码
    "order_type": null,                     订单类型 1内单 2外单
    "loan_way": 1,                          放款方式 1转账
    "transfer_type": 1,                     到账类型 1实时 2普通
    "info_fee_rate": 0.55,                  信息费费率
    "info_foo": "10523.00",                 信息费金额
    "collector": "张三",                    信息费收取人
    "mobile": "18529113254",                联系电话
    "reason": "测试元原因",                 支付原因(申请原因)
    "attachment": [                         附件材料
    {
    "id": 5,                        附件id
    "url": "/uploads/20180717/7a07d619c7f9ffb82527db5d386513e5.png",   附件地址
    "name": "毕圆明.png",                 附件名称
    "thum1": "uploads/thum/20180717/7a07d619c7f9ffb82527db5d386513e5.png",  附件缩略图地址
    "ext": "png"                          附件后缀
    },
    {
    "id": 6,
    "url": "/uploads/20180717/36a1b7c84079d280c9f6058c98bf1659.jpg",
    "name": "身份证复印件.jpg",
    "thum1": "uploads/thum/20180717/36a1b7c84079d280c9f6058c98bf1659.jpg",
    "ext": "jpg"
    }
    ]
    }
    "accountinfo": [               支付账户(退费账户)信息
    {
    "id": 11,                     账户信息id
    "bank_account": "张三",       银行户名
    "account_type": 1,            账户类型 1业主 2客户 3收款确定书
    "account_source": 1,          账户来源 1合同 2财务确认书 3其他
    "bank_card": "4521368",       银行卡号
    "bank": "中国银行",            开户银行
    "bank_branch": "车公庙支行",   开户支行
    "money": "12458.00",           支付金额(信息费) 转账金额(首期款转账) 应退金额(退保证金) 应退担保金额(现金按天退) 退款金额(额度退担保费)
    "exhibition_fee": "12345.00",  应退展期费(现金按天退专有)
    "actual_payment": null,      实付金额(信息费) 实转金额(首期款转账) 实退金额(退保证金，现金按天退，额度退担保费)
    "expense_taxation": null     扣税费用(信息费)  手续费(首期款转账,退保证金，现金按天退，额度退担保费)
    },
    {
    "bank_account": "李四",
    "account_type": 2,
    "account_source": 3,
    "bank_card": "123445",
    "bank": "中国农业银行",
    "bank_branch": "车公庙支行",
    "money": "1456.00",
    "exhibition_fee": "23456.00",
    "actual_payment": null,
    "expense_taxation": null
    }
    ]
    }
     *
     */

    public function costApprovalDetail(){
        $id = $this->request->Post('id', null, 'int');
        if(empty($id)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '参数不能为空');

        $otherInfo = $this->orderother->where(['id' => $id])->field('order_sn,process_type')->find();
        if(empty($otherInfo)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '不存在此条费用申请信息!');

        try{
            $returnInfo = [];
            //获取订单基本信息
            $returnInfo['orderinfo'] = $this->orderother->getOrderInfo($otherInfo['process_type'],$otherInfo['order_sn']);

            //获取申请信息
            $returnInfo['applyforinfo'] = $this->orderother->getApplyInfo($id);

            //获取支付账户信息(退费账户信息)
            $returnInfo['accountinfo'] = $this->orderother->getAccountsInfo($id);

            return $this->buildSuccess($returnInfo);
        }catch (\Exception $e){
            return $this->buildFailed(ReturnCode::UPDATE_FAILED, '银行账户更新失败'.$e->getMessage());
        }
    }


    /**
     * @api {post} admin/CostApply/editCostApply 编辑费用申请[admin/CostApply/editCostApply]
     * @apiVersion 1.0.0
     * @apiName editCostApply
     * @apiGroup CostApply
     * @apiSampleRequest admin/CostApply/editCostApply
     *
     *
     * @apiParam {int}  id    其他业务表主键id
     * @apiParam {string}  order_sn   订单编号
     * @apiParam {int}  loan_way   放款方式 1转账
     * @apiParam {int}  transfer_type   到账类型 1实时 2普通
     * @apiParam {float}   info_fee_rate  信息费费率
     * @apiParam {int}  info_foo   信息费金额
     * @apiParam {string}  collector  信息费收取人
     * @apiParam {int}  mobile  联系电话
     * @apiParam {string}  reason  支付原因(申请原因)
     * @apiParam {arr}  attachment  附件材料[1,2,3]
     * @apiParam {int}  order_type  订单类型 1内单 2外单
     *
     * @apiParam {array} accountinfo  支付账户信息(具体参数在下面)
     * @apiParam {string}   bank_account  银行户名
     * @apiParam {string}  bank_card   银行卡号
     * @apiParam {string}  bank  开户银行
     * @apiParam {string}  bank_branch  开户支行
     * @apiParam {float}  money  信息费(支付金额) 首期款(转账金额) 保证金(应退金额) 按天退担保费(应退担保金额) 额度退担保费(退款金额)
     * @apiParam {int}  account_type  账户类型 1业主 2客户 3收款确定书
     * @apiParam {int}  account_source  账户来源 1合同 2财务确认书 3其他
     * @apiParam {float}  exhibition_fee  应退展期费(按天退担保费申请专有)
     */

    public function editCostApply(){
        $this->id = $this->request->post('id');
        $process_type = $this->orderother->where(['id' => $this->id, 'status' => 1])->value('process_type');
        if(empty($process_type)) return $this->buildFailed(ReturnCode::PARAM_INVALID, "不存在该费用申请信息!");

        $this->process_type = $this->Deliverynum($process_type);
        $this->time = time();
        //校验申请信息
        $resAppinfo = $this->checkApplicationinfo();
        if ($resAppinfo !== true)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $resAppinfo);

        //校验账户信息
        $resAccinfo = $this->checkAccountinfo();
        if ($resAccinfo !== true)
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $resAccinfo);

        $costInfo = $this ->checkData['costInfo'];
        Db::startTrans();
        //try{
            unset($costInfo['order_sn']);
            unset($costInfo['process_type']);
            $costInfo['update_time'] = $this->time;
            //更改申请信息
            if (($this->orderother->where(['id' => $this->id, 'stage' => 10001])->update($costInfo)) === false) {
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '申请信息更新失败');
            }

            //更改支付账户信息
            $accountInfo = $this->updateAccount();
            if ($accountInfo !== 1) {
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, $accountInfo);
            }

            //更改附件
            $attachmentInfo = $this->updateAttachment();
            if ($attachmentInfo !== 1) {
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, $attachmentInfo);
            }

            Db::commit();
            return $this->buildSuccess();
        //}catch (\Exception $e){
            Db::rollback();
            trace('编辑费用申请错误信息', $e->getMessage());
            return $this->buildFailed(ReturnCode::UPDATE_FAILED, '费用申请添加失败'.$e->getMessage());
        //}
    }

    //更改附件
    private function updateAttachment() {
        //将以前的附件全部删除
        Db::name('order_other_attachment')->where(['order_other_id' => $this->id])->delete();
        if($msg = $this->addAttachment() !== 1) return $msg;
        return 1;
    }

    /**
     * 更改账户信息
     * @return int|string
     * @throws \Exception
     */
    private function updateAccount() {
        $accountInfo = $this ->checkData['accountInfo'];
        foreach ($accountInfo as $k => $v){
            if(empty($v['id'])){   //添加
                $v['order_other_id'] = $this->id;
                $v['create_uid'] = $this->userInfo['id'];
                $v['create_time'] = $v['update_time'] = $this->time;
                if($this->orderotheraccount->insert($v) === false) return "账户信息添加失败!";
            }else{ //更新
                if($this->orderotheraccount->save($v,['id' => $v['id']]) === false) return "银行账户信息更新失败!";

            }
        }
        unset($accountInfo);
        return 1;
    }



    /**
     * 转换类型
     * @param $type
     * @return string
     */
    private function Deliverynum($processtype) {
        switch ($processtype) {
            case 'INFO_FEE' :
                return 1;
                break;
            case 'SQ_TRANSFER' :
                return 2;
                break;
            case 'DEPOSIT' :
                return 3;
                break;
            case 'XJ_GUARANTEE_FEE' :
                return 4;
                break;
            case 'ED_GUARANTEE_FEE' :
                return 5;
                break;
            default:
                return '';
        }
    }








}
