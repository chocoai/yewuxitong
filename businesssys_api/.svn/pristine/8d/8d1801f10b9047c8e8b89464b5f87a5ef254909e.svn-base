<?php
/**
权证管理控制器
 */

namespace app\admin\controller;
use app\model\Order;
use app\model\SystemUser;
use app\model\OrderWarrant as modelOrderWarrant;
use app\model\Dictionary;
use app\util\OrderComponents;
use app\util\ReturnCode;
use think\Db;
use think\Exception;

class OrderWarrant extends Base
{
    /**
     * @api {post} admin/OrderWarrant/index 取原产证列表[admin/OrderWarrant/index]
     * @apiVersion 1.0.0
     * @apiName index
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/index
     * @apiParam {string}  search   查询名称
     * @apiParam {string}  managerId   理财经理
     * @apiParam {string}  isGet   取证状态0默认全部1已取2待取
     * @apiParam {int}  type  暂时有JYDB一个类型
     * @apiParam {int}  isGet   是否组合贷1是0否
     * @apiParam {int}  subordinates   0不含下属1含下属
     * @apiParam {int}  page   页
     * @apiParam {int}  pageSize   每页显示数量
     * @apiSuccess {string} order_sn    订单编号
     * @apiSuccess {string} type    订单类型
     * @apiSuccess {string} estate_owner    业主姓名
     * @apiSuccess {string} is_finish    0待取原产证1已取原产证
     * @apiSuccess {string} create_time    取证日期
     * @apiSuccess {string} name    理财经理姓名
     * @apiSuccess {string} deptname    理财经理部门
     * @apiSuccess {array} estateInfo    房产信息
     */
    public function index()
    {
        $result = $this->baseList(1);
        if($result === false) return $this->buildFailed(ReturnCode::DB_READ_ERROR, '列表读取失败!');
        if($result['data']){
            foreach($result['data'] as &$val){
                $val['estateInfo'] = OrderComponents::showEstateList($val['order_sn'],'estate_name','DB');
            }
        }
        return $this->buildSuccess($result);
    }

    /**
     * @api {post} admin/OrderWarrant/details 详情[admin/OrderWarrant/details]
     * @apiVersion 1.0.0
     * @apiName details
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/details
     * @apiParam {string}  orderSn   权证详情
     * @apiParam {int}  stage   判断图片显示 1不显示
     */
    public function details()
    {
        $orderSn  = $this->request->post('orderSn','');
        $stage = input('post.stage',0,'int');
        if(empty($orderSn)) return $this->buildFailed(ReturnCode::PARAM_INVALID, '参数无效!');

        //订单按揭信息
        $mortgage = OrderComponents::showMortgage($orderSn,'type,mortgage_type,money,organization_type,organization,interest_balance');
        $orgMortgage = $nowMortgage = [];
        //获取数据字典按揭类型
        $mortgageArr = (new Dictionary)->getDictionaryByType('MORTGAGE_TYPE');
        $mortgageType = [];
        foreach($mortgageArr as $val){

            $mortgageType[$val['code']]=$val['valname'];
        }
        if($mortgage) {
            foreach ($mortgage as $val) {
                $val['mortgage_type'] = $mortgageType[$val['mortgage_type']];
                $val['organization_type'] = $val['organization_type'] == '1' ? '银行':'其他';
                if($val['mortgage_type'] == '1'){
                    $val['mortgage_type'] = '公积金贷款';
                }
                if ($val['type'] === 'ORIGINAL') {
                    $orgMortgage[] = $val;
                } else {
                    $nowMortgage[] = $val;
                }
            }
        }

        $result['orgMortgage'] = $orgMortgage;//原按揭信息
        $result['nowMortgage'] = $nowMortgage;//现按揭信息
        //订单用户信息
        $customerInfo = OrderComponents::showCustomerInfo($orderSn,'ctype,is_seller,is_comborrower,cname,certtype,certcode,mobile,is_guarantee');
        $sellInfo = $buyerInfo = [];
        if($customerInfo){
            foreach($customerInfo as $val){
                $val['ctype'] = $val['ctype'] == '1'  ? '个人':'企业';
                $val['certtype'] = $val['certtype'] == '1'  ? '身份证':'其他';
                $val['is_guarantee'] = $val['is_guarantee'] == '1' ? '是':'否';
                if($val['is_seller'] == '1'){
                    $val['is_comborrower'] == '0' ? $buyerInfo['customer'][] = $val:$buyerInfo['combor'][] = $val;
                }elseif($val['is_seller'] == '2'){
                    $val['is_comborrower'] == '0' ? $sellInfo['customer'][] = $val:$sellInfo['combor'][] = $val;
                }
            }
        }
        $result['sellerInfo'] = $sellInfo;
        $result['buyerInfo'] = $buyerInfo;
        //房产信息
        $estateInfo = OrderComponents::showEstateList($orderSn,'estate_name,replace(estate_region,\'|\',\'-\') estate_region,estate_area,estate_certtype,estate_certnum,house_type','DB');
        if($estateInfo){
            foreach($estateInfo as &$val){
                $val['house_type'] = (new Dictionary)->getValnameByCode('ORDER_HOUSE_TYPE',$val['house_type']);
                $val['estate_certtype'] = (new Dictionary)->getValnameByCode('CERTTYPE',$val['estate_certtype']);
            }

        }
        $result['estateInfo'] = $estateInfo;
        $result['dpInfo'] = OrderComponents::orderDp($orderSn,'dp_strike_price,dp_earnest_money,dp_money,dp_supervise_bank,dp_buy_way,dp_now_mortgage,dp_redeem_bank');
        if($stage!='1'){
            $result['image'] = Db::name('order_warrant a')->join('bs_attachment b','a.receipt_img=b.id')->where('a.is_finish=1 and a.receipt_img is not null')->field('b.name')->select();//权证图片
        }
        return $this->buildSuccess($result);
    }

    /**
     * @api {post} admin/OrderWarrant/mortgageList 注销抵押列表[admin/OrderWarrant/mortgageList]
     * @apiVersion 1.0.0
     * @apiName mortgageList
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/mortgageList
     * @apiParam {string}  search   查询名称
     * @apiParam {string}  managerId   理财经理
     * @apiParam {string}  isGet   取证状态0默认全部1已取2待取
     * @apiParam {int}  type  暂时有JYDB一个类型
     * @apiParam {int}  isGet   是否组合贷1是0否
     * @apiParam {int}  subordinates   0不含下属1含下属
     * @apiParam {int}  page   页
     * @apiParam {int}  pageSize   每页显示数量
     * @apiSuccess {string} order_sn    订单编号
     * @apiSuccess {string} type    订单类型
     * @apiSuccess {string} estate_owner    业主姓名
     * @apiSuccess {string} is_finish    0待取原产证1已取原产证
     * @apiSuccess {string} create_time    取证日期
     * @apiSuccess {string} name    理财经理姓名
     * @apiSuccess {string} deptname    理财经理部门
     * @apiSuccess {array} estateInfo    房产信息
     */
    public function mortgageList()
    {
        $result = $this->baseList(2);
        if($result === false) return $this->buildFailed(ReturnCode::DB_READ_ERROR, '列表读取失败!');
        if($result['data']){
            foreach($result['data'] as &$val){
                $val['estateInfo'] = OrderComponents::showEstateList($val['order_sn'],'estate_name','DB');
            }
        }
        return $this->buildSuccess($result);
    }

    /**
     * @api {post} admin/OrderWarrant/ownershipList 递件过户列表[admin/OrderWarrant/ownershipList]
     * @apiVersion 1.0.0
     * @apiName ownershipList
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/ownershipList
     * @apiParam {string}  search   查询名称
     * @apiParam {string}  managerId   理财经理
     * @apiParam {string}  isGet   取证状态0默认全部1已取2待取
     * @apiParam {int}  type  暂时有JYDB一个类型
     * @apiParam {int}  isGet   是否组合贷1是0否
     * @apiParam {int}  subordinates   0不含下属1含下属
     * @apiParam {int}  page   页
     * @apiParam {int}  pageSize   每页显示数量
     * @apiSuccess {string} order_sn    订单编号
     * @apiSuccess {string} type    订单类型
     * @apiSuccess {string} estate_owner    业主姓名
     * @apiSuccess {string} is_finish    0待取原产证1已取原产证
     * @apiSuccess {string} create_time    取证日期
     * @apiSuccess {string} name    理财经理姓名
     * @apiSuccess {string} deptname    理财经理部门
     * @apiSuccess {array} estateInfo    房产信息
     */
    public function ownershipList()
    {
        $result = $this->baseList(3);
        if($result === false) return $this->buildFailed(ReturnCode::DB_READ_ERROR, '列表读取失败!');
        if($result['data']){
            foreach($result['data'] as &$val){
                $val['estateInfo'] = OrderComponents::showEstateList($val['order_sn'],'estate_name','DB');
            }
        }
        return $this->buildSuccess($result);
    }

    /**
     * @api {post} admin/OrderWarrant/newCertList 领取新证列表[admin/OrderWarrant/newCertList]
     * @apiVersion 1.0.0
     * @apiName newCertList
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/newCertList
     * @apiParam {string}  search   查询名称
     * @apiParam {string}  managerId   理财经理
     * @apiParam {string}  isGet   取证状态0默认全部1已取2待取
     * @apiParam {int}  type  暂时有JYDB一个类型
     * @apiParam {int}  isGet   是否组合贷1是0否
     * @apiParam {int}  subordinates   0不含下属1含下属
     * @apiParam {int}  page   页
     * @apiParam {int}  pageSize   每页显示数量
     * @apiSuccess {string} order_sn    订单编号
     * @apiSuccess {string} type    订单类型
     * @apiSuccess {string} estate_owner    业主姓名
     * @apiSuccess {string} is_finish    0待取原产证1已取原产证
     * @apiSuccess {string} create_time    取证日期
     * @apiSuccess {string} name    理财经理姓名
     * @apiSuccess {string} deptname    理财经理部门
     * @apiSuccess {array} estateInfo    房产信息
     */
    public function newCertList()
    {
        $result = $this->baseList(4);
        if($result === false) return $this->buildFailed(ReturnCode::DB_READ_ERROR, '列表读取失败!');
        if($result['data']){
            foreach($result['data'] as &$val){
                $val['estateInfo'] = OrderComponents::showEstateList($val['order_sn'],'estate_name','DB');
            }
        }
        return $this->buildSuccess($result);
    }

    /**
     * @api {post} admin/OrderWarrant/newMortgageList 抵押新证列表[admin/OrderWarrant/newMortgageList]
     * @apiVersion 1.0.0
     * @apiName newMortgageList
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/newMortgageList
     * @apiParam {string}  search   查询名称
     * @apiParam {string}  managerId   理财经理
     * @apiParam {string}  isGet   取证状态1已取2待取
     * @apiParam {int}  type  暂时有JYDB一个类型
     * @apiParam {int}  isGet   是否组合贷1是0否
     * @apiParam {int}  subordinates   0不含下属1含下属
     * @apiParam {int}  page   页
     * @apiParam {int}  pageSize   每页显示数量
     * @apiSuccess {string} order_sn    订单编号
     * @apiSuccess {string} type    订单类型
     * @apiSuccess {string} estate_owner    业主姓名
     * @apiSuccess {string} is_finish    0待取原产证1已取原产证
     * @apiSuccess {string} create_time    取证日期
     * @apiSuccess {string} name    理财经理姓名
     * @apiSuccess {string} deptname    理财经理部门
     * @apiSuccess {array} estateInfo    房产信息
     */
    public function newMortgageList()
    {
        $result = $this->baseList(5);
        if($result === false) return $this->buildFailed(ReturnCode::DB_READ_ERROR, '列表读取失败!');
        if($result['data']){
            foreach($result['data'] as &$val){
                $val['estateInfo'] = OrderComponents::showEstateList($val['order_sn'],'estate_name','DB');
            }
        }
        return $this->buildSuccess($result);
    }
    /**
     * @api {post} admin/OrderWarrant/update 完成原产证取回[admin/OrderWarrant/update]
     * @apiVersion 1.0.0
     * @apiName update
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/update
     * @apiParam {string}  id   权证id
     * @apiParam {string}  orderSn   订单编号
     */
    public function update()
    {

        $result = $this->baseUpdate(1016,'完成取原产证',1015);
        if($result !== 1) return $result;
        return $this->buildSuccess();
    }


    /**
     * @api {post} admin/OrderWarrant/updateMortgage 完成注销抵押[admin/OrderWarrant/updateMortgage]
     * @apiVersion 1.0.0
     * @apiName updateMortgage
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/updateMortgage
     * @apiParam {string}  id   权证id
     * @apiParam {string}  orderSn   订单编号
     */
    public function updateMortgage()
    {
        $result = $this->baseUpdate(1017,'完成注销抵押',1016);
        if($result !== 1) return $result;
        return $this->buildSuccess();
    }

    /**
     * @api {post} admin/OrderWarrant/updateOwnership 完成过户[admin/OrderWarrant/updateOwnership]
     * @apiVersion 1.0.0
     * @apiName updateOwnership
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/updateOwnership
     * @apiParam {string}  id   权证id
     * @apiParam {string}  orderSn   订单编号
     * @apiParam {string}  receiptNo   回执编号
     * @apiParam {string}  receiptImg   回执相片
     */
    public function updateOwnership()
    {
        $receiptNo = input('post.receiptNo','');
        $receiptImg = input('post.receiptImg','0','int');
        if(empty($receiptNo) || $receiptImg<=0) return $this->buildFailed(ReturnCode::PARAM_INVALID, '缺少参数!');
        $result = $this->baseUpdate(1018,'完成过户',1017,$receiptNo,$receiptImg);
        if($result !== 1) return $result;
        return $this->buildSuccess();
    }

    /**
     * @api {post} admin/OrderWarrant/updateNewCert 完成领取新证[admin/OrderWarrant/updateNewCert]
     * @apiVersion 1.0.0
     * @apiName updateNewCert
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/updateNewCert
     * @apiParam {string}  id   权证id
     * @apiParam {string}  orderSn   订单编号
     * @apiParam {string}  receiptNo   回执编号
     * @apiParam {string}  receiptImg   回执相片
     */
    public function updateNewCert()
    {
        $receiptNo = input('post.receiptNo','');
        $receiptImg = input('post.receiptImg','0','int');
        if(empty($receiptNo) || $receiptImg<=0) return $this->buildFailed(ReturnCode::PARAM_INVALID, '缺少参数!');
        $result = $this->baseUpdate(1019,'完成领取新证',1018,$receiptNo,$receiptImg);
        if($result !== 1) return $result;
        return $this->buildSuccess();
    }

    /**
     * @api {post} admin/OrderWarrant/updateNewMortgage 完成新证抵押[admin/OrderWarrant/updateNewMortgage]
     * @apiVersion 1.0.0
     * @apiName updateNewMortgage
     * @apiGroup OrderWarrant
     * @apiSampleRequest admin/OrderWarrant/updateNewMortgage
     * @apiParam {string}  id   权证id
     * @apiParam {string}  orderSn   订单编号
     * @apiParam {string}  receiptNo   回执编号
     * @apiParam {string}  receiptImg   回执相片
     */
    public function updateNewMortgage()
    {
        $receiptNo = input('post.receiptNo','');
        $receiptImg = input('post.receiptImg','0','int');
        if(empty($receiptNo) || $receiptImg<=0) return $this->buildFailed(ReturnCode::PARAM_INVALID, '缺少参数!');
        $result = $this->baseUpdate(1020,'完成新证抵押',1019,$receiptNo,$receiptImg);
        if($result !== 1) return $result;
        return $this->buildSuccess();
    }





    /**
     * 权证列表查询
     * @param $warrantStage 权证阶段
     * @return array
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    private function baseList($warrantStage)
    {
        $pageSize = input('post.pageSize',0,'int');
        $page = input('post.page',1,'int');
        $search = input('search','','trim');
        $subordinates = input('post.subordinates',0,'int');
        $managerId = input('post.managerId',0,'int');
        $type = input('post.type','');
        $isGet = input('post.isGet',2,'int');
        $where['z.warrant_stage']=$warrantStage;//取原产证
        $isGet != '2' && $where['z.is_finish'] = $isGet;
        $search && $where['x.order_sn|y.estate_name']=['like', "%{$search}%"];
        if($managerId){
            if($subordinates){
                $userStr = SystemUser::getOrderPowerStr($managerId);
                $where['x.financing_manager_id'] = ['in',$userStr];
            }else{
                $where['x.financing_manager_id'] = $managerId;
            }
        }

        $type && $where['x.type'] = $type;
        $res =  Order::orderWarrant($where,$page,$pageSize);
        if($res['data']){
            $Arr =  dictionary_reset((new Dictionary)->dictionaryMultiType(['ORDER_TYPE','MORTGAGE_TYPE']),1);
            foreach($res['data'] as $key=>$val){
                $res['data'][$key]['type'] = isset($Arr['ORDER_TYPE'][$res['data'][$key]['type']]) ? $Arr['ORDER_TYPE'][$res['data'][$key]['type']] : '';
                $mortgage = OrderComponents::showMortgage($res['data'][$key]['order_sn'],'organization,mortgage_type','ORIGINAL');
                $newMortgage = [];
                $mortgageStr = '';
                foreach($mortgage as $k=>$v){
                    $mortgageStr === '' && $mortgageStr=$v['organization'];
                    $mortgageType =  isset($Arr['MORTGAGE_TYPE'][$mortgage[$k]['mortgage_type']]) ? $Arr['MORTGAGE_TYPE'][$mortgage[$k]['mortgage_type']] : '';
                    $newMortgage[] = $v['organization'].'（'.$mortgageType.'）';
                }
                $res['data'][$key]['mortgageInfo'] = $newMortgage;
                $res['data'][$key]['mortgage'] = $mortgageStr;
                $res['data'][$key]['buyer'] = OrderComponents::showCustomerInfo($res['data'][$key]['order_sn'],'cname',1,0);
            }
        }
        return $res;


    }


    /**
     * 更新
     * @param $orderSn
     * @param $id
     * @param $stage更新后的订单状态code
     * @param string $receiptNo 回执编号
     * @param string $receiptImg 回执相片
     * @return int|string
     */
    private function baseUpdate($stage,$operate,$orgStage,$receiptNo='',$receiptImg='')
    {
        $id = input('post.id','0','int');
        $orderSn = input('post.orderSn','');
        if($id==='0' || empty($orderSn)){
            return $this->buildFailed(ReturnCode::PARAM_INVALID, '缺少参数!');
        }
        Db::startTrans();
        try{
            $modelOrderWarrant = new modelOrderWarrant;
            $data = ['update_time'=>time(),'is_finish'=>1,'finish_uid'=>$this->userInfo['id']];
            $receiptNo && $data['receipt_no'] = $receiptNo;
            $receiptImg && $data['receipt_img'] = $receiptImg;
            if($modelOrderWarrant->save($data,['order_sn'=>$orderSn,'id'=>$id]) !== 1){
                Db::rollback();
                return $this->buildFailed(ReturnCode::UPDATE_FAILED, '操作失败');
            }
            //return ['order_sn'=>$orderSn,'status'=>1,'stage'=>$orgStage,'aa'=>$stage];
            //更改订单主状态

            if((new Order)->save(['stage'=>$stage],['order_sn'=>$orderSn,'status'=>1,'stage'=>$orgStage]) !== 1){
                Db::rollback();
                return $this->buildFailed(ReturnCode::UPDATE_FAILED, '订单状态更新失败');
            }
            $stageName = (new Dictionary)->getValnameByCode('ORDER_JYDB_STATUS',$stage);
            //添加订单日志
            if(OrderComponents::addOrderLog($this->userInfo,$orderSn,$stageName,$operate,$operate,'','',$stage) === false){
                Db::rollback();
                return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '订单日志添加失败');
            }
            Db::commit();
        }catch(Exception $e){
            Db::rollback();
            return $this->buildFailed(ReturnCode::EXCEPTION, '系统繁忙，请稍后重试!'.$e->getMessage());
        }
       return 1;
    }


}
