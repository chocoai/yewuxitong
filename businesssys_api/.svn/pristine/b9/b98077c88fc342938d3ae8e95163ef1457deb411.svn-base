<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/17
 * Time: 18:10
 */
namespace app\model;
use app\util\Tools;
use think\Db;

class Order extends Base{

    /**
    /* @author 林桂均
     * 订单列表查询
     * @param array $where
     * @param $page
     * @return array
     * @throws \think\exception\DbException
     */
    public static function orderList($where=[],$page,$pageSize)
    {
        return self::alias('x')
            ->field('x.order_sn,x.financing_manager_id,x.type,x.create_time,x.stage,x.status,z.is_bank_losn,z.guarantee_fee_status,y.estate_region,estate_name,y.estate_owner')
            ->join('estate y','x.order_sn=y.order_sn')
            ->join('order_guarantee z','x.order_sn=z.order_sn')
            ->where($where)
            ->order('x.create_time desc')
            ->group('x.order_sn')
            ->paginate($pageSize ? $pageSize : ['list_rows'=>config('apiBusiness.ADMIN_LIST_DEFAULT'),'page'=>$page])
            ->toArray();
    }

    /**
    /* @author 林桂均
     * 订单详情
     * @param $orderSn
     * @return array
     * @throws \think\exception\DbException
     */
    public static function orderDetail($orderSn)
    {
        $orderInfo = self::alias('x')
            ->field('x.order_sn,x.type,x.create_time,x.stage,x.status,x.financing_manager_id,
            y.notarization,y.guarantee_money,y.self_financing,y.guarantee_per,y.guarantee_rate,y.bussiness_loan,y.accumulation_fund,y.account_per,y.guarantee_fee,y.fee,y.info_fee,y.total_fee')
            ->join('order_guarantee y', 'x.order_sn=y.order_sn','left')
            ->where(['x.order_sn' => $orderSn,'x.status'=>1])->find();
        if(!$orderInfo) return false;

        //订单按揭信息
        $mortgage = Db::name('order_mortgage')
            ->field('type,mortgage_type,money,organization_type,organization,interest_balance,create_uid')
            ->where(['order_sn'=>$orderSn,'status'=>1])->select();
        $orgMortgage = $nowMortgage = [];
        if($mortgage) {
            foreach ($mortgage as $val) {
                $val['mortgage_type'] = self::getMortgageType($val['mortgage_type']);
                $val['organization_type'] = $val['organization_type'] == '1' ? '银行':'其他';
                if($val['mortgage_type'] == '1'){
                    $val['mortgage_type'] = '公积金贷款';
                }

                if ($val['type'] === 'ORIGINAL') {
                    $orgMortgage[] = $val;
                } else {
                    $nowMortgage[] = $val;
                }
            }
        }
        $orderInfo['orgMortgage'] = $orgMortgage;
        $orderInfo['nowMortgage'] = $nowMortgage;
        //订单首期款信息
        $orderInfo['dpInfo'] = Db::name('order_dp')
            ->field('dp_strike_price,dp_earnest_money,dp_money,dp_supervise_bank,dp_buy_way,dp_now_mortgage,dp_redeem_bank,create_uid')
            ->where(['order_sn'=>$orderSn,'status'=>1])->find();
        //订单用户信息
        $customerInfo = Db::name('customer')
            ->field('ctype,is_seller,is_comborrower,cname,certtype,certcode,certother,mobile,is_guarantee')
            ->where(['order_sn'=>$orderSn,'status'=>1])->select();
        $sellInfo = $buyerInfo = [];
        if($customerInfo){
            foreach($customerInfo as $val){
                $val['ctype'] = $val['ctype'] == '1'  ? '个人':'企业';
                $val['certtype'] = $val['certtype'] == '1'  ? '身份证':'其他';
                $val['is_guarantee'] = $val['is_guarantee'] == '1' ? '是':'否';
                if($val['is_seller'] == '1'){
                    $val['is_comborrower'] == '0' ? $buyerInfo['customer'][] = $val:$buyerInfo['combor'][] = $val;
                }elseif($val['is_seller'] == '2'){
                    $val['is_comborrower'] == '0' ? $sellInfo['customer'][] = $val:$sellInfo['combor'][] = $val;
                }
            }
        }
        $orderInfo['sellerInfo'] = $sellInfo;
        $orderInfo['buyerInfo'] = $buyerInfo;
        //房产信息
        $orderInfo['estateInfo'] = Db::name('estate')
            ->field('estate_name,replace(estate_region,\'|\',\'-\') estate_region,estate_area,estate_certtype,estate_certnum,house_type')
            ->where(['order_sn'=>$orderSn,'status'=>1])->select();
        return $orderInfo;
    }



    /**
     * 获取按揭类型
     * @param $type
     * @return string
     */
    private static function getMortgageType($type)
    {
        switch ($type){
            case '1':
                return '公积金贷款';
                break;
            case '2':
                return '商业贷款';
                break;
            case '3':
                return '装修贷/消费贷';
                break;
            default :
                return '其他';
        }
    }

    /* @author 赵光帅
     * 费用入账列表查询
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */
    public static function costList($map,$page,$pageSize)
    {
        return self::alias('x')
            ->field('x.order_sn,x.finance_sn,x.type,z.name,estate_name,y.estate_owner,n.ac_guarantee_fee_time,n.guarantee_fee,n.ac_guarantee_fee,n.guarantee_fee_status')
            ->join('order_guarantee n','x.order_sn=n.order_sn')
            ->join('estate y','x.order_sn=y.order_sn')
            ->join('system_user z','x.financing_manager_id=z.id')
            ->where($map)
            ->order('x.create_time desc')
            ->group('x.order_sn')
            ->paginate(array('list_rows' => $pageSize, 'page' => $page))
            ->toArray();
    }

    /* @author 赵光帅
     * 订单信息与财务入账流水明细
     * @apiParam {string}  order_sn   订单编号
     */
    public static function booksDetail($order_sn)
    {
        return self::alias('x')
            ->field('x.order_sn,x.type,z.name,z.deptname,x.finance_sn,n.self_financing,n.guarantee_fee,n.fee,n.guarantee_fee_status')
            ->join('order_guarantee n','x.order_sn=n.order_sn')
            ->join('system_user z','x.financing_manager_id=z.id')
            ->where(['x.order_sn' => $order_sn])
            ->find();
    }

    /* @author 赵光帅
     * 订单信息与银行放款流水明细
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */
    public static function bankList($map,$page,$pageSize)
    {
        return self::alias('x')
            ->field('x.order_sn,x.finance_sn,x.type,z.name,estate_name,y.estate_owner,n.lender_bank,n.bank_money_time,n.guarantee_money,n.bank_money,n.bank_money_status')
            ->join('order_guarantee n','x.order_sn=n.order_sn')
            ->join('estate y','x.order_sn=y.order_sn')
            ->join('system_user z','x.financing_manager_id=z.id')
            ->where($map)
            ->order('n.bank_money_time desc')
            ->group('x.order_sn')
            ->paginate(array('list_rows' => $pageSize, 'page' => $page))
            ->toArray();
    }

    /* @author 赵光帅
     * 银行放款入账流水订单信息
     * @apiParam {string}  order_sn   订单编号
     */
    public static function banksDetail($order_sn)
    {
        return self::alias('x')
            ->field('x.order_sn,x.type,z.name,z.deptname,x.finance_sn,n.guarantee_money,n.bank_money,n.bank_money_status,n.bussiness_loan+n.accumulation_fund as chuzhang_money,y.dp_redeem_bank')
            ->join('order_guarantee n','x.order_sn = n.order_sn','LEFT')
            ->join('system_user z','x.financing_manager_id = z.id','LEFT')
            ->join('order_dp y','x.order_sn = y.order_sn','LEFT')
            ->where(['x.order_sn' => $order_sn])
            ->find();
    }

    /* @author 赵光帅
     * 发送指令列表
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */
    public static function instructionList($map,$page,$pageSize)
    {
        return self::alias('x')
            ->field('x.order_sn,x.finance_sn,x.type,z.name,y.estate_name,y.estate_owner,n.lender_bank,n.instruct_status,n.is_bank_losn')
            ->join('order_guarantee n','x.order_sn=n.order_sn')
            ->join('estate y','x.order_sn=y.order_sn')
            ->join('system_user z','x.financing_manager_id=z.id')
            ->where($map)
            ->order('n.bank_money_time desc')
            ->group('x.order_sn')
            ->paginate(array('list_rows' => $pageSize, 'page' => $page))
            ->toArray();
    }

}
