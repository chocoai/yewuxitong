<?php
/**
 * Created by PhpStorm.
 * User: 赵光帅
 * Date: 2018/7/17
 * Time: 8:39
 */
namespace app\admin\controller;


use app\util\ReturnCode;
use app\model\Attachment;
use think\Db;

class Appupload{
    /**
     * @api {post} admin/Appupload/app_Uploads 多文件上传[admin/Appupload/app_Uploads]
     * @apiVersion 1.0.0
     * @apiName app_Uploads
     * @apiGroup public
     * @apiSampleRequest admin/Appupload/app_Uploads
     *
     *
     * @apiParam {arr}  image    文件文件
     *
     */
    public function app_Uploads(){
        $iamgeArr = request()->file('image');
        if(empty($iamgeArr)) return $this->buildFailed(ReturnCode::EMPTY_PARAMS, '文件不能为空!');
        $path = config('uploadFile.img_path').DS.'uploads';
        $idStr = '';
        // 启动事务
        Db::startTrans();
        foreach ($iamgeArr as $k => $file){
            $info = $file->validate(['size'=>18874368,'ext'=> 'jpg,png,gif,jpeg'])->move($path,true,false);
            //文件地址
            $filePath = config('uploadFile.img_path').DS.'uploads'.DS.$info->getSaveName();
            if($info){
                //图片原始名称
                $imgInfo['name'] = $info->getInFo()['name'];
                //新的图片名称
                $imgInfo['savename'] = $info->getFilename();
                //文件大小
                $imgInfo['filesize'] = $info->getInFo()['size'];
                //文件后缀
                $imgInfo['ext'] = $info->getExtension();
                //缩略图的上传地址
                $date = date('Ymd',time());
                $thumPath = config('uploadFile.thum_path').DS.$date;
                if(!file_exists($thumPath))
                {
                    //检查是否有该文件夹，如果没有就创建，并给予最高权限
                    mkdir($thumPath, 0700);
                }
                //缩略图
                $image = \think\Image::open($filePath);
                // 按照原图的比例生成一个最大为150*150的缩略图并保存为thumb.png
                $image->thumb(100, 100)->save($thumPath.DS.$imgInfo['savename']);
                //缩略图片的地址
                $imgInfo['thum1'] = config('uploadFile.thum_lujing').DS.$imgInfo['savename'];
                //图片宽
                $imgInfo['imagewidth'] = getimagesize($filePath)[0];
                //图片高
                $imgInfo['imageheight'] = getimagesize($filePath)[1];
                //mime类型
                $imgInfo['mimetype'] = getimagesize($filePath)['mime'];
                //文件类型
                $imgInfo['imagetype'] = $info->getInFo()['type'];
                //获取上传文件的hash散列值
                $imgInfo['md5'] = $info->hash('md5');
                $imgInfo['sha1'] = $info->hash('sha1');
                //路径
                $imgInfo['path'] = config('uploadFile.img_path');
                //连接地址
                $imgInfo['url'] = DS .'uploads'.DS .$info->getSaveName();
                //上传时间
                $imgInfo['create_time'] = time();
                $resImg = Attachment::create($imgInfo);
                if(empty($resImg)){
                    // 回滚事务
                    Db::rollback();
                    return $this->buildFailed(ReturnCode::UPDATE_FAILED, '添加附件表失败');
                }
                $idStr .= $resImg->id.',';
            }else{
                // 回滚事务
                Db::rollback();
                // 上传失败获取错误信息
                return $this->buildFailed(ReturnCode::FILE_SAVE_ERROR, $file->getError());
            }
        }
        // 提交事务
        Db::commit();
        return $this->buildSuccess(['idstr' => rtrim($idStr,',')],'上传成功');

    }

    public function buildSuccess($data='', $msg = '操作成功', $code = ReturnCode::SUCCESS) {
        $return = [
            'code' => $code,
            'msg'  => $msg,
            'data' => $data
        ];

        return $return;
    }

    public function buildFailed($code, $msg, $data = []) {
        $return = [
            'code' => $code,
            'msg'  => $msg,
            'data' => $data
        ];
        return $return;
    }





}