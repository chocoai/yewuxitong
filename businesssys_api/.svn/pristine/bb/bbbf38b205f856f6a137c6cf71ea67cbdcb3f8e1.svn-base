<?php

namespace app\admin\controller;

use think\Request;
use think\Db;
use app\model\OrderOther;
use app\model\Order;
use app\model\SystemUser;
use app\model\SystemDept;
use app\model\OrderOtherAccount;
use app\model\OrderAdvanceMoney;
use app\model\OrderOtherAttachment;
use app\util\ReturnCode;
use Workflow\Workflow;

/**折扣申请
 * Class OrderOthers
 * @package app\admin\controller
 * @author: bordon
 */
class OrderOthers extends Base
{
    /**
     * @api {get} admin/OrderOthers/discountApplyList 折扣申请列表[admin/OrderOthers/discountApplyList]
     * @apiVersion 1.0.0
     * @apiName discountApplyList
     * @apiGroup OrderOthers
     * @apiSampleRequest admin/OrderOthers/discountApplyList
     *
     * @apiParam {string} order_sn    订单编号
     *
     * @apiSuccess {Object}  list       订单基本信息.
     * @apiSuccess {string} list.process_sn    流程编号
     * @apiSuccess {string} list.order_sn    业务单号
     * @apiSuccess {string} list.finance_sn    财务编号
     * @apiSuccess {string} list.estate_name    房产名称
     * @apiSuccess {string} list.estate_owner    业主姓名
     * @apiSuccess {string} list.stage_text    审批状态
     * @apiSuccess {string} list.name    理财经理
     * @apiSuccess {string} list.create_time    申请时间
     */
    public function discountApplyList(Request $request)
    {
        $create_uid = $request->get('create_uid', '');
        $subordinates = $request->get('subordinates', 0);
        $page = $request->get('page', 1);
        $pageSize = $request->get('size', config('apiBusiness.ADMIN_LIST_DEFAULT'));
        $keywords = $request->get('keywords', '');
        $start_time = $request->get('start_time');
        $end_time = $request->get('end_time');
        if ($start_time && $end_time) {
            $start_time_stamp = strtotime($start_time);
            $end_time_stamp = strtotime($end_time);
            if ($start_time_stamp > $end_time_stamp) {
                $map['r.create_time'] = ['between', [$end_time, $start_time]];
            } else {
                $map['r.create_time'] = ['between', [$start_time, $end_time]];
            }
        } else {
            $start_time && $map['r.create_time'] = ['egt', $start_time];
            $end_time && $map['r.create_time'] = ['elt', $end_time];
        }
        $where = [];
        if ($create_uid) {
            if ($subordinates == 1) {
                $userStr = SystemUser::getOrderPowerStr($create_uid);
            } else {
                $userStr = $create_uid;
            }
            $where['o.financing_manager_id'] = ['in', $userStr];
        }
        $keywords && $where['o.order_sn|e.estate_name|o.finance_sn'] = ['like', "%{$keywords}%"];
        $where['o.status'] = 1;
        $where['or.process_type'] = ['in', ['ED_DISCOUNT', 'XJ_DISCOUNT']];
        $where['or.status'] = 1;
        $where['e.estate_usage'] = 'DB';
        $list = OrderOther::discountApplyList($where, ['page' => $page, 'list_rows' => $pageSize]);
        return $this->buildSuccess([
            'count' => $list['total'],
            'list' => $list['data']
        ]);
    }

    /**
     * @api {get} admin/OrderOthers/discountOrderDetail 折扣申请订单基本信息[admin/OrderOthers/discountOrderDetail]
     * @apiVersion 1.0.0
     * @apiName discountOrderDetail
     * @apiGroup OrderOthers
     * @apiSampleRequest admin/OrderOthers/discountOrderDetail
     *
     * @apiParam {string} order_sn    订单编号
     *
     * @apiSuccess {Object}  orderInfo       订单基本信息.
     * @apiSuccess {string} orderInfo.order_sn    业务单号
     * @apiSuccess {string} orderInfo.finance_sn    财务编号
     * @apiSuccess {string} orderInfo.estate_name    房产信息
     * @apiSuccess {string} orderInfo.money    担保金额
     * @apiSuccess {string} list.self_financing    自筹金额
     * @apiSuccess {string} orderInfo.ac_guarantee_fee    实收担保费
     * @apiSuccess {string} orderInfo.order_dept    所属部门
     * @apiSuccess {string} orderInfo.financing_manager_name    理财经理
     * @apiSuccess {string} orderInfo.financing_manager_mobile    理财经理电话
     * @apiSuccess {string} orderInfo.dept_manger_name    部门经理
     * @apiSuccess {string} orderInfo.dept_manger_mobile    部门经理电话
     * @apiSuccess {string} orderInfo.guarantee_rate    担保费率
     * @apiSuccess {string} orderInfo.guarantee_fee    预计担保费
     * @apiSuccess {Object}  advanceMoney       垫资信息
     * @apiSuccess {string} advanceMoney.advance_money    垫资金额
     * @apiSuccess {string} advanceMoney.advance_day    垫资天数
     * @apiSuccess {string} advanceMoney.advance_rate    原日垫资费率/%
     * @apiSuccess {string} advanceMoney.advance_fee    原垫资费/元
     */
    //@author: bordon
    public function discountOrderDetail(Request $request)
    {
        $order_sn = $request->post('order_sn');
        if (!$order_sn) {
            return $this->buildFailed(ReturnCode::PARAM_INVALID, '参数错误');
        }
        $result = Order::alias('o')
            ->where(['o.status' => 1, 'o.order_sn' => $order_sn])
            ->join('order_guarantee g', 'g.order_sn = o.order_sn')
            ->join('system_user u', 'u.id = o.financing_manager_id', 'left')
            ->field('o.id,o.type,o.order_sn,o.finance_sn,o.money,u.name as financing_manager_name,u.mobile as financing_manager_mobile,
            o.financing_dept_id,o.dept_manager_id,
            g.self_financing,g.ac_guarantee_fee,g.guarantee_rate,g.guarantee_fee')
            ->findOrFail();
        $financing = SystemUser::where('id', $result->dept_manager_id)->field('name,mobile')->find();
        $result->order_dept = SystemDept::where('id', $result->financing_dept_id)->value('name');
        $result->dept_manger_name = $financing->name;
        $result->dept_manger_mobile = $financing->mobile;
        unset($result['financing_dept_id']);
        unset($result['dept_manager_id']);
        // 现金类
        if ($this->checkOrderType($result->type)) {
            $advanceMoney = OrderAdvanceMoney::where('order_sn', $result->order_sn)->where('status', 1)
                ->field('id,advance_money,advance_day,advance_rate,advance_fee')->select();
        }
        return $this->buildSuccess([
            'orderInfo' => $result,
            'advanceMoney' => $advanceMoney ? $advanceMoney : []]);
    }

    /**
     * @api {get} admin/OrderOthers/addDiscount 新增折扣申请[admin/OrderOthers/addDiscount]
     * @apiVersion 1.0.0
     * @apiName addDiscount
     * @apiGroup OrderOthers
     * @apiSampleRequest admin/OrderOthers/addDiscount
     *
     * @apiParam {string} order_sn    订单编号
     * @apiParam {string} order_type    订单类型
     * @apiParam {string} reason    折扣原因
     * @apiParam {array} attachment    附件ids [1,2,3]
     * @apiParam {string} guarantee_rate    担保费率(额度类JYDB、FJYDB) 必须
     * @apiParam {array} otherDiscount    垫资金额(现金类'JYXJ', 'TMXJ', 'DQJK', 'PDXJ', 'GMDZ', 'SQDZ') 必须
     * @apiParam {string} otherDiscount.id    垫资费表 id (详情advanceMoney里对应记录id)
     * @apiParam {string} otherDiscount.new_rate    现日垫资费率
     * @apiParamExample {json} Request-Example:
     *     {
     *       "otherDiscount": {
     *              [id:1,new_rate:0.2]
     *              [id:2,new_rate:0.2]
     *          }
     *     }
     *
     */
    public function addDiscount(Request $request)
    {
        $data = $request->post();
        $rule = [
            ['order_sn', 'require', '参数错误'],
            ['order_type', 'require', '订单类型不能为空'],
            ['guarantee_rate', 'requireIf:type,2', '担保费率'],
            ['reason', 'require', '折扣原因不能为空'],
            ['attachment', 'require|array', '附件不能为空'],
        ];
        // todo 验证未完成
        $result = $this->validate($data, $rule);
        if (true !== $result) {
            // 验证失败 输出错误信息
            return $this->buildFailed(ReturnCode::PARAM_INVALID, $result);
        }
        $orderOther = new OrderOther();
        $isXj = $this->checkOrderType();
        $orderOther->category = $isXj ? 1 : 2;
        $orderOther->process_type = $isXj ? 'XJ_DISCOUNT' : 'ED_DISCOUNT';
        $orderOther->order_sn = $data['order_sn'];
        $orderOther->create_uid = $this->userInfo['id'];
        $orderOther->reason = $data['reason'];
        $orderOther->order_sn = $data['order_sn'];
        Db::startTrans();
        try {
            $res = $orderOther->save();
            $arr = [];
            //现金
            $orderTee = OrderGuarantee::where('order_sn', $data['order_sn'])->field('guarantee_rate,guarantee_fee,money')->find();
            if ($isXj) {
                foreach ($data['otherDiscount '] as $item) {
                    $advance = OrderAdvanceMoney::get(item['id']);
                    $arr[] = [
                        'order_other_id' => $res->id,
                        'old_rate' => $advance->advance_rate,
                        'old_money' => $advance->advance_fee,
                        'new_rate' => $item['new_rate'],
                        'new_money' => $orderTee->money * $item['new_rate'] / 100, //现金现垫资费
                        'order_advance_money_id' => $advance->id
                    ];
                }
            } else {
                $arr[] = [
                    'order_other_id' => $res->id,
                    'old_rate' => $orderTee->guarantee_rate,
                    'old_money' => $orderTee->guarantee_fee,
                    'new_rate' => $data['guarantee_rate'], // 额度现担保费率
                    'new_money' => $orderTee->money * $data['guarantee_rate'] / 100,  // 额度现担保费
                ];
            }
            (new OrderOtherAccount())->insertAll($arr);
            //添加附件
            OrderOtherAttachment::addAttachment(implode(',', $data['attachment']), $res->id);
            // 初始化流程
            $this->initWorkflow($res);
            Db::commit();
            return $this->buildSuccess();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return $this->buildFailed(ReturnCode::DB_SAVE_ERROR, '操作失败' . $e->getMessage());
        }

    }

    /**是否为交易现金
     * @param $type 订单类型
     * @return bool true 为现金，false额度
     * @author: bordon
     */
    private function checkOrderType($type)
    {
        return in_array($type, ['JYXJ', 'TMXJ', 'DQJK', 'PDXJ', 'GMDZ', 'SQDZ']);
    }

    /**初始化流程
     * @param $data
     * @throws \Exception
     * @author: bordon
     */
    private function initWorkflow($data)
    {
        $workflow = new Workflow();
        // 折扣申请
        $flow_id = $workflow->getFlowId('DISCOUNT_APPLY');
        $config = [
            'flow_id' => $flow_id,
            'user_id' => $this->userInfo['id'],
            'order_sn' => $data->order_sn,
            'mid' => $data['id']
        ];
        $workflow->init($config);
    }
}
