<?php


namespace app\api\controller;

use think\Request;
use think\Db;
use Workflow\Workflow;
use Workflow\service\ProcService;
use app\workflow\model\SystemUser;
use app\util\OrderComponents;
use app\model\Order;
use app\model\OrderGuarantee;
use app\util\ReturnCode;

/**
 * Class AppFlow APP端驳回派单接口
 * @package app\api\controller
 * @author: bordon
 */
class AppFlow extends Base
{
    /**
     * AppFlow constructor.
     */
//    public function __construct(Request $request)
//    {
//        if (!in_array($request->ip(), config('appConfig.app_allow_ips'))) {
//            return json(['code' => -1, 'msg' => 'no permission']);
//        }
//    }


    /**财务审批--驳回派单
     */
    public function Reject(Request $request)
    {
        $data = $request->post();
        if (!$data) {
            return json([
                'code' => -1,
                'msg' => '参数不能为空'
            ]);
        }
        Db::startTrans();
        try {
            $proc = ProcService::getDispatchProcId($data['order_type'] . '_FINANCIAL', $data['order_sn'], $data['dispatch_id']);
            $user = SystemUser::find($data['user_id']);
            $back_proc_id = self::getBackProcId($data['order_sn'], $proc['flow_id'], $proc['entry_id']);
            $config = [
                'user_id' => $user->id,
                'user_name' => $user->name,
                'proc_id' => $proc['id'],
                'content' => $data['content'],
                'back_proc_id' => $back_proc_id,
                'order_sn' => $data['order_sn']
            ];
            $workflow = new Workflow($config);
            $workflow->unpass();
            Db::commit();
            return json([
                'code' => 1,
                'msg' => 'ok'
            ]);
        } catch (\Exception $e) {
            Db::rollback();
            return json([
                'code' => -1,
                'msg' => $e->getMessage()
            ]);
        }
    }

    //获取退回节点id
    private function getBackProcId($order_sn, $flow_id, $entry_id)
    {
        $where['wp.wf_status'] = '201';
        $where['wc.is_deleted'] = 1;
        $where['wc.is_back'] = 0;
        $where['wc.order_sn'] = $order_sn;
        $where['wc.flow_id'] = $flow_id;
        $where['wc.entry_id'] = $entry_id;
        $res = Db::name('workflow_process')->alias('wp')
            ->join('__WORKFLOW_PROC__ wc', 'wc.process_id=wp.id')
            ->where($where)->value('wc.id');
        return $res;
    }

    /**额度发送指令
     * @apiParam {string}  order_sn   订单编号
     * @apiParam {int}  type   1申请发送 2撤回发送 3确认放款 4确认发送
     * @apiParam {arr}  $userinfo   登录的用户信息
     */
    public function linesSendInstruct($orderSn, $type, $userinfo) {
        if (empty($orderSn) || empty($type) || empty($userinfo))
            return json([
                'code' => -1,
                'msg' => '参数不能为空'
            ]);

        // 启动事务
        Db::startTrans();
        try {
            if ($type == 1) {
                OrderGuarantee::where('order_sn', $orderSn)->update(['instruct_status' => 2]);
                $msg = "申请发送成功";
            }elseif ($type == 2) {
                OrderGuarantee::where('order_sn', $orderSn)->update(['instruct_status' => 2]);
                $msg = "撤回发送成功";
            }elseif ($type == 3) {
                OrderGuarantee::where('order_sn', $orderSn)->update(['is_loan_finish' => 1]);
                $msg = "确认放款成功";
            }elseif ($type == 4) {
                OrderGuarantee::where('order_sn', $orderSn)->update(['instruct_status' => 3]);
                $msg = "确认发送成功";
            }
            /* 添加订单操作记录 */
            //根据订单号查询出订单状态
            $stageInfo = Order::getOne(['order_sn' => $orderSn], 'stage');
            $operate = $stage = show_status_name($stageInfo['stage'], 'ORDER_JYDB_STATUS');
            $operate_node = "发送指令";
            $operate_det = $userinfo['name'] . $msg;
            $operate_reason = '';
            $stage_code = $stageInfo['stage'];
            $operate_table = 'order';
            OrderComponents::addOrderLog($userinfo, $orderSn, $stage, $operate_node, $operate, $operate_det, $operate_reason, $stage_code, $operate_table);

            // 提交事务
            Db::commit();
            return json([
                'code' => 1,
                'msg' => $msg
            ]);
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return json([
                'code' => -1,
                'msg' => '指令发送失败'.$e->getMessage()
            ]);
        }
    }


}