<?php

namespace Workflow;

use think\Db;
use app\workflow\model\WorkflowFlowlink;
use app\workflow\model\WorkflowEntry;
use app\workflow\model\WorkflowProcess;
use app\workflow\model\WorkflowProc;
use app\workflow\model\SystemUser;
use app\workflow\model\WorkflowProcessVar;
use Workflow\Traits\WorkflowTrait;

/**
 * 处理工作流
 * Class Workflow
 * @package Workflow
 * @author: bordon
 */
class Workflow implements WorkflowInterface
{
    use WorkflowTrait;

    protected $option = [
        'user_id' => '', // 用户id
        'user_name' => '', // 用户姓名
        'proc_id' => '',  // 当前步骤id
        'content' => '',  // 审批意见
        'backtoback' => '',  //是否退回之后直接返回本节点
        'back_proc_id' => '',  // 退回节点id
        'next_process_id' => ''  //退回之后直接返回节点id
    ];

    public function __construct($option = [])
    {
        $this->option = array_merge($this->option, $option);
    }

    /**流程初始化
     * @param WorkflowEntry $entry 流程实例
     * @param WorkflowFlowlink $flowlink 当前流程步骤实例
     */
    public static function init(WorkflowEntry $entry, WorkflowFlowlink $flowlink)
    {
        $process_id = $process_name = null;
        if (!WorkflowFlowlink::where('type', 'neq', 'Condition')->where('process_id', $flowlink->process_id)->find()) {
            //第一步未指定审核人 自动进入下一步操作
            WorkflowProc::create([
                'flow_id' => $entry->flow_id,
                'entry_id' => $entry->id,
                'order_sn' => $entry->order_sn,
                'process_id' => $flowlink->process_id,
                'process_name' => $flowlink->process->process_name,
                'user_id' => $entry->user_id,
                'user_name' => $entry->user->username,
                'dept_name' => $entry->user->department->name,
                'auditor_id' => $entry->user_id,
                'auditor_name' => $entry->user->username,
                'auditor_dept' => $entry->user->department->name,
                'status' => 9,
                'circle' => $entry->circle,
                'concurrence' => 1
            ]);
            //下一步审批人员
            $auditor_ids = self::getProcessAuditorIds($entry, $flowlink->next_process_id);
            //下一流程id
            $process_id = $flowlink->next_process_id;
            $process_name = $flowlink->nextProcess->process_name;
            $entry->process_id = $flowlink->next_process_id;
        } else {
            //下一步审批人员
            $auditor_ids = self::getProcessAuditorIds($entry, $flowlink->process_id);
            $process_id = $flowlink->process_id;
            $process_name = $flowlink->process->process_name;
            $entry->process_id = $flowlink->process_id;
        }
        //步骤流转
        //步骤审核人
        $auditors = SystemUser::whereIn('id', $auditor_ids)->field('id,username,deptid')->select();
        if (count($auditors) < 1) {
            throw new \Exception("下一步骤未找到审核人");
        }
        foreach ($auditors as $v) {
            WorkflowProc::create([
                'flow_id' => $entry->flow_id,
                'entry_id' => $entry->id,
                'order_sn' => $entry->order_sn,
                'process_id' => $process_id,
                'process_name' => $process_name,
                'user_id' => $v->id,
                'user_name' => $v->username,
                'dept_name' => $entry->user->department->name,
                'status' => 0,
                'circle' => $entry->circle,
                'concurrence' => 1
            ]);
        }
        return $entry->save();
    }


    /**流程流转
     * @param $process_id 流程步骤id
     */
    public function flowlink($proc_id)
    {
        $proc = WorkflowProc::with('entry.user.department')->where(['user_id' => $this->option['user_id'], "status" => 0])->findOrFail($proc_id);
        //特殊处理
        $approval_type = $proc->process->approval_type;
        $approval_user_ids = self::getProcessAuditorIds($proc->entry, $proc->process->id);
        if ((count($approval_user_ids) > 1) && in_array($approval_type, ['1', '3'])) {
            array_splice($approval_user_ids, array_search($this->option['user_id'], $approval_user_ids), 1);
            $isAllPass = $this->counterSign($approval_user_ids, $proc);
        } else {
            $isAllPass = true;
        }
        /**************退回直接跳转begin********************/
        if (!empty($proc->next_process_id) && ((in_array($approval_type, ['1', '3']) && $isAllPass) || !in_array($approval_type, ['1', '3']))) {
            $this->goToProcess($proc->entry, $proc->next_process_id);
            $this->updateProcInfo($proc, $approval_type, $isAllPass); //更新流程审批信息
            $this->updateBackEntryInfo($proc, $proc->next_process_id);//更新entry
            return true;
        }
        /**************退回直接跳转end********************/
        //有条件
        if (WorkflowFlowlink::where(['process_id' => $proc->process_id, "type" => "Condition"])->count() > 1) {
            $var = WorkflowProcessVar::where(['process_id' => $proc->process_id])->group('expression_field')->select();
            //当前步骤判断的变量 需要根据 $var->expression_field（如请假 day） 去查当前工作流对应表数据里的值
            $value = Db::name($var[0]->table_name)->where('id', $proc->entry->mid)->field(array_column($var, 'expression_field'))->find();
            if (!$value) {
                throw new \Exception('流转条件设置错误，无法流转，请联系流程设置人员');
            }
            $flowlinks = WorkflowFlowlink::where(['process_id' => $proc->process_id, "type" => "Condition"])->select();
            $flowlink = null;
            $field_arr = array_column($var, 'expression_field');
            foreach ($flowlinks as $v) {
                if (empty($v->expression)) {
                    throw new \Exception('未设置流转条件，无法流转，请联系流程设置人员');
                }
                //条件判断表达式为1表示true，通过的话直接进入下一步骤
                if ($v->expression == '1') {
                    $flowlink = $v;
                    break;
                } else {
                    $res = $this->expression_check($v->expression, $field_arr, $value);
                    if ($res) {
                        $flowlink = $v;
                        break;
                    }
                }
            }
            if (empty($flowlink)) {
                throw new \Exception('未满足流转条件，无法流转到下一步骤，请联系流程设置人员');
            }
            $auditor_ids = self::getProcessAuditorIds($proc->entry, $flowlink->next_process_id);
            if (empty($auditor_ids)) {
                throw new \Exception("下一步骤未找到审核人");
            }
            $auditors = SystemUser::whereIn('id', $auditor_ids)->field('id,username,deptid')->select();
            if (count($auditors) < 1) {
                throw new \Exception("下一步骤未找到审核人");
            }
            $this->addProc($flowlink, $proc, $auditors, $approval_type, $isAllPass);  //添加处理明细
            $this->updateEntryInfo($flowlink, $proc, $approval_type, $isAllPass);
        } else {
            $flowlink = WorkflowFlowlink::where(['process_id' => $proc->process_id, "type" => "Condition"])->find();
            // 创建子流程
            if ($flowlink->process->child_flow_id > 0) {
                if (!$child_entry = WorkflowEntry::where(['pid' => $proc->entry->id, 'circle' => $proc->entry->circle])->find()) {
                    $child_entry = WorkflowEntry::create([
                        'title' => $proc->entry->title,
                        'flow_id' => $flowlink->process->child_flow_id,
                        'user_id' => $proc->entry->user_id,
                        'status' => 0,
                        'pid' => $proc->entry->id,
                        'circle' => $proc->entry->circle,
                        'enter_process_id' => $flowlink->process_id,
                        'enter_proc_id' => $proc->id,
                    ]);
                }
                $child_flowlink = WorkflowFlowlink::alias('fl')
                    ->join('__WORKFLOW_PROCESS__ p', 'p.id=fl.process_id')
                    ->where(['fl.flow_id' => $flowlink->process->child_flow_id, 'fl.type' => 'Condition', 'p.position' => 0])
                    ->order('sort asc')
                    ->field('fl.id,fl.flow_id,fl.type,fl.process_id,fl.next_process_id,fl.auditor,fl.expression,fl.sort,p.process_name')
                    ->findOrFail();
                self::init($child_entry, $child_flowlink);  //初始化子流程
                $child_entry->parentEntry->update([
                    'id' => $child_entry->pid,
                    'child' => $child_entry->process_id
                ]);
            } else {
                //最后一步
                if ($flowlink->next_process_id == -1) {
                    $proc->entry->update([
                        'id' => $proc->entry->id,
                        'status' => 9,
                        'process_id' => $flowlink->process_id
                    ]);
                    //子流程结束
                    if ($proc->entry->pid > 0) {
                        if ($proc->entry->enter_process->child_after == 1) {
                            //同时结束父流程
                            $proc->entry->parentEntry->update([
                                'id' => $proc->entry->pid,
                                'status' => 9,
                                'child' => 0
                            ]);
                        } else {
                            //进入设置的父流程步骤
                            if ($proc->entry->enter_process->child_back_process > 0) {
                                $this->goToProcess($proc->entry->parentEntry, $proc->entry->enterProcess->child_back_process);
                                $proc->entry->parentEntry->process_id = $proc->entry->enterProcess->child_back_process;
                            } else {
                                //默认进入父流程步骤下一步
                                $parent_flowlink = WorkflowFlowlink::where(['process_id' => $proc->entry->enterProcess->id, "type" => "Condition"])->find();
                                //判断是否为最后一步
                                if ($parent_flowlink->next_process_id == -1) {
                                    $proc->entry->parentEntry->update([
                                        'status' => 9,
                                        'child' => 0,
                                        'process_id' => $proc->entry->enterProcess->child_back_process
                                    ]);
                                    //流程结束通知

                                } else {
                                    $this->goToProcess($proc->entry->parentEntry, $parent_flowlink->next_process_id);
                                    $proc->entry->parentEntry->process_id = $parent_flowlink->next_process_id;
                                    $proc->entry->parentEntry->status = 0;
                                }
                            }
                            $proc->entry->parentEntry->child = 0;
                            $proc->entry->parentEntry->save();
                        }
                    } else {
                        //流程结束通知

                    }
                } else {
                    $auditor_ids = self::getProcessAuditorIds($proc->entry, $flowlink->next_process_id);
                    $auditors = SystemUser::whereIn('id', $auditor_ids)->field('id,username,deptid')->select();
                    if (count($auditors) < 1) {
                        throw new \Exception("下一步骤未找到审核人");
                    }
                    $this->addProc($flowlink, $proc, $auditors, $approval_type, $isAllPass);
                    $this->updateEntryInfo($flowlink, $proc, $approval_type, $isAllPass); //更新流程状态
                }
            }
        }
        //更新审批信息
        $this->updateProcInfo($proc, $approval_type, $isAllPass);
    }

    /**添加处理明细
     * 依次审批|会签  有添加过则不添加，全部通过 添加下一步骤待处理明细
     * 正常\或签 直接添加下一步骤待处理明细
     * @param WorkflowFlowlink $flowlink
     * @param WorkflowProc $proc
     * @param $auditors
     * @param $approval_type
     * @param $isAllPass
     */
    public function addProc(WorkflowFlowlink $flowlink, WorkflowProc $proc, $auditors, $approval_type, $isAllPass)
    {
        if ((in_array($approval_type, ['1', '3']) && $isAllPass) || !in_array($approval_type, ['1', '3'])) {
            $data = [
                'entry_id' => $proc->entry_id,
                'flow_id' => $proc->flow_id,
                'order_sn' => $proc->order_sn,
                'process_id' => $flowlink->next_process_id,
                'process_name' => $flowlink->next_process->process_name,
                'circle' => $proc->entry->circle,
                'status' => 0,
                'is_read' => 0,
                'concurrence' => 1,
            ];
            foreach ($auditors as $key => $v) {
                if ($approval_type == '3') {
                    $data['current'] = $key + 1;
                }
                $data['user_id'] = $v->id;
                $data['user_name'] = $v->username;
                $data['dept_name'] = $v->department->name;
                $data['step'] = $key + 1;
                WorkflowProc::create($data);
            }
        }
    }

    /**更新流程状态
     * @param WorkflowFlowlink $flowlink
     * @param WorkflowProc $proc
     * @param $approval_type
     * @param $isAllPass
     */
    public function updateEntryInfo(WorkflowFlowlink $flowlink, WorkflowProc $proc, $approval_type, $isAllPass)
    {
        //依次签或者全签
        if ((in_array($approval_type, ['1', '3']) && $isAllPass) || !in_array($approval_type, ['1', '3'])) {
            $proc->entry->update([
                'id' => $proc->entry->id,
                'wf_status' => $flowlink->nextProcess->wf_status,
                'process_id' => $flowlink->next_process_id
            ]);
            //判断是否存在父进程
            if ($proc->entry->pid > 0) {
                $proc->entry->parentEntry->update([
                    'id' => $proc->entry->pid,
                    'child' => $flowlink->next_process_id
                ]);
            }
        }
    }


    /**更新流程状态(直接返回退回之前节点)
     * @param WorkflowProc $proc
     * @param $next_process_id
     */
    public function updateBackEntryInfo(WorkflowProc $proc, $next_process_id)
    {
        $wf_status = WorkflowProcess::where('id', $next_process_id)->value('wf_status');
        $proc->entry->update([
            'id' => $proc->entry->id,
            'wf_status' => $wf_status,
            'process_id' => $next_process_id,
            'status' => 0
        ]);

    }

    /**更新审批信息
     * @param WorkflowProc $proc
     */
    public function updateProcInfo(WorkflowProc $proc, $approval_type)
    {
        $data = [
            'status' => 9, //通过
            'auditor_id' => $this->option['user_id'],
            'auditor_name' => $this->option['user_name'],
            'auditor_dept' => SystemUser::find($this->option['user_id'])->department->name,
            'content' => $this->option['content'] // 审批意见
        ];
        $where = [
            'entry_id' => $proc->entry_id,
            'process_id' => $proc->process_id,
            'circle' => $proc->entry->circle,
            'status' => 0,
            'id' => $proc->id
        ];
        if (in_array($approval_type, ['1', '3'])) {
            if ($approval_type == '3') {
                //依次审批
                WorkflowProc::where([
                    'entry_id' => $proc->entry_id,
                    'flow_id' => $proc->flow_id,
                    'circle' => $proc->entry->circle,
                    'status' => 0,
                    'step' => $proc->step + 1
                ])->setField('current', '1');
            }
        } else { //普通审批 未审批内容设置为删除
            $map = [
                'id' => ['neq', $proc->id],
                'entry_id' => $proc->entry_id,
                'process_id' => $proc->process_id,
                'circle' => $proc->entry->circle,
                'is_deleted' => 1,
                'status' => 0,
            ];
            WorkflowProc::where($map)->setField('is_deleted', '-1');
        }
        WorkflowProc::where($where)->update($data);
    }

    /**
     * 会签审批 所有审批人员审批通过，流程流转到下一节点
     */
    public static function counterSign($approval_user_ids, WorkflowProc $proc)
    {
        $isAllPass = true;
        foreach ($approval_user_ids as $key => $item) {
            $result = WorkflowProc::where(['entry_id' => $proc->entry_id, 'flow_id' => $proc->flow_id, 'status' => 9, 'auditor_id' => $item])->value('id');
            if (!$result) {
                $isAllPass = false;
                break;
            }
        }
        return $isAllPass;
    }

    /**前往指定流程步骤
     * @param WorkflowEntry $entry
     * @param $process_id 当前步骤process_id
     * @param string $backtoback 退回之后直接返回本节点
     * @param string $next_process_id 退回之后返回节点的id
     */
    protected function goToProcess(WorkflowEntry $entry, $process_id, $backtoback = '')
    {
        $auditor_ids = self::getProcessAuditorIds($entry, $process_id);
        $auditors = SystemUser::whereIn('id', $auditor_ids)->field('id,username,deptid')->select();
        if (!$auditors) {
            throw new \Exception("下一步骤未找到审核人");
        }
        $process = WorkflowProcess::find($process_id);
        $approval_type = $process->approval_type;
        $process_name = $process->process_name;
        foreach ($auditors as $key => $v) {
            $data = [
                'entry_id' => $entry->id,
                'order_sn' => $entry->order_sn,
                'flow_id' => $entry->flow_id,
                'process_id' => $process_id,
                'process_name' => $process_name,
                'user_id' => $v->id,
                'user_name' => $v->username,
                'dept_name' => $v->department->name,
                'circle' => $entry->circle,
                'status' => 0,
                'is_read' => 0,
                'concurrence' => 1,
                'step' => $key + 1
            ];
            //退回流程之后审批通过直接返回该节点
            if (!empty($backtoback)) {
                $data['next_process_id'] = $this->option['next_process_id'];
            }
            if ($approval_type == '3') { //按顺序依次审批
                $data['current'] = $key + 1;
            }
            WorkflowProc::create($data);
        }
    }

    /**获得下一步审批人员id
     * @param WorkflowEntry $entry 当前流程实例
     * @param $process_id  流程id
     * @return array
     */
    protected static function getProcessAuditorIds(WorkflowEntry $entry, $process_id)
    {
        $auditor_ids = [];
        //查看是否自动选人
        if ($flowlink = WorkflowFlowlink::where('type', 'Sys')->where('process_id', $process_id)->find()) {
            if ($flowlink->auditor == '-1000') {
                //发起人
                $auditor_ids[] = $entry->user_id;
            }

            if ($flowlink->auditor == '-1001') {
                //发起人部门主管
                if (empty($entry->user->department)) {
                    return $auditor_ids;
                }
                $auditor_ids[] = $entry->user->department->director_id;
            }

            if ($flowlink->auditor == '-1002') {
                //发起人部门经理
                if (empty($entry->user->department)) {
                    return $auditor_ids;
                }
                $auditor_ids[] = $entry->user->department->manager_id;
            }
        } else {
            //并行
            if ($flowlink = WorkflowFlowlink::where('type', 'Emp')->where('process_id', $process_id)->find()) {
                //指定员工
                $auditor_ids = array_merge($auditor_ids, explode(',', $flowlink->auditor));
            }
            if ($flowlink = WorkflowFlowlink::where('type', 'Dept')->where('process_id', $process_id)->find()) {
                //指定部门
                $dept_ids = explode(',', $flowlink->auditor);
                $employee_ids = SystemUser::whereIn('deptid', $dept_ids)->column('id');
                $auditor_ids = array_merge($auditor_ids, $employee_ids);
            }
            if ($flowlink = WorkflowFlowlink::where('type', 'Role')->where('process_id', $process_id)->find()) {
                //指定角色
                $role_ids = explode(',', $flowlink->auditor);
                $employee_ids = SystemUser::where(['position_id' => ['in', $role_ids]])->column('id');
//                $employee_ids = SystemUser::where('', 'exp', "status=1 and FIND_IN_SET(authorize,{$role_ids})")->column('id');
                $auditor_ids = array_merge($auditor_ids, $employee_ids);
            }
        }
        return array_unique($auditor_ids);
    }

    /**下一步骤信息
     * @param WorkflowEntry $entry
     * @param $process_id
     * @return string
     */
    protected function getNextProcess($proc)
    {
        if (WorkflowFlowlink::where(['process_id' => $proc->process_id, "type" => "Condition"])->count() > 1) {
            $var = WorkflowProcessVar::where(['process_id' => $proc->process_id])->group('expression_field')->select();
            //当前步骤判断的变量 需要根据 $var->expression_field（如请假 day） 去查当前工作流对应表数据里的值
            $value = Db::name($var[0]->table_name)->where('id', $proc->entry->mid)->field(array_column($var, 'expression_field'))->find();
            if (!$value) {
                throw new \Exception('流转条件设置错误，无法流转，请联系流程设置人员');
            }
            $flowlinks = WorkflowFlowlink::where(['process_id' => $proc->process_id, "type" => "Condition"])->select();
            $flowlink = null;
            $field_arr = array_column($var, 'expression_field');
            foreach ($flowlinks as $v) {
                if (empty($v->expression)) {
                    throw new \Exception('未设置流转条件，无法流转，请联系流程设置人员');
                }
                //条件判断表达式为1表示true，通过的话直接进入下一步骤
                if ($v->expression == '1') {
                    $flowlink = $v;
                    break;
                } else {
                    $res = $this->expression_check($v->expression, $field_arr, $value);
                    if ($res) {
                        $flowlink = $v;
                        break;
                    }
                }
            }
        } else {
            $flowlink = WorkflowFlowlink::where('type', 'Condition')->where('process_id', $proc->process_id)->find();
        }
        return $flowlink;
    }

    /**可退回的步骤
     * @param WorkflowEntry $entry
     */
    public function getPreProcessList(WorkflowEntry $entry)
    {
        $where = [
            'status' => ['in', ['9', '-1']],
            'circle' => $entry->circle,
            'entry_id' => $entry->id,
            'is_back' => 0,
            'is_deleted' => 1,
            'process_id' => ['neq', $entry->process_id]
        ];
        $list = WorkflowProc::where($where)
            ->order('create_time desc')
            ->field('id,entry_id,flow_id,process_id,process_name')
            ->group('process_id')
            ->select();
        return $list;
    }


    /**表达式校验
     * @param $expression  字符串表达式
     * @param $field_arr 变量
     * @param $value 变量值
     * @return bool
     */
    private function expression_check($expression, $field_arr, $value)
    {
        //可填写 1 或 0 表示验证成功或失败
        if ($expression == "1" || $expression == "0") {
            return true;
        }
        foreach ($field_arr as $item) {
            $$item = $value[$item];
        }
        //替换AND /OR 为 && /||
        $result = '';
        $expression = str_replace("AND", "&&", $expression);
        $expression = str_replace("OR", "||", $expression);
        @eval ('$result=' . $expression . ";");//执行表达式
        if ($result === false) {//解析错误返回false
            return false;
        } else {
            return true;
        }
    }

    /**流程信息
     * @param $proc_id 步骤id
     */
    public function workflowInfo()
    {
        $workflow = [];
        $proc = WorkflowProc::where(['user_id' => $this->option['user_id'], "status" => 0])->findOrFail($this->option['proc_id']);
        $nextprocess = $this->getNextProcess($proc);
        $workflow ['preprocess'] = $this->getPreProcessList($proc->entry);  // 可退回流程节点
        $workflow['process'] = $proc->process;  //当前流程
        $workflow['nextprocess'] = $nextprocess->nextprocess; // 下一步流程
        $workflow ['log'] = WorkflowProc::where(['circle' => $proc->entry->circle, 'entry_id' => $proc->entry->id, 'flow_id' => $proc->entry->flow_id, 'is_deleted' => 1])
            ->order('create_time desc')->select();  //审批记录
        $workflow['nextprocess_user'] = SystemUser::where('id', 'in', self::getProcessAuditorIds($proc->entry, $nextprocess->next_process_id))->field('id,name')->select(); // 下一步流程操作人员
        return $workflow;
    }
}

