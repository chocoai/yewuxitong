<?php

namespace app\workflow\controller;

use think\Controller;
use think\Request;
use think\Db;
use app\workflow\model\WorkflowFlow as FlowModel;
use app\workflow\model\WorkflowProcess as ProcessModel;
use app\workflow\model\WorkflowFlowlink as FlowlinkModel;
use app\workflow\model\SystemDept;
use app\workflow\model\SystemUser;
use app\util\Tools;


class Flowlink extends Controller
{
    public function update(Request $request)
    {
        Db::startTrans();
        try {
            //保存流程设计
            $flow_id = $request->post('flow_id', 0);
            //更新flow 表 jsplumb json数据. 更新流程轨迹 flowlink表 type=Condition

            $process_info = json_decode($request->post('process_info', []), true);

            //删除节点后保存 过滤掉删除节点
            if (!empty($process_info)) {
                $flow = FlowModel::find($flow_id);

                //更新flow 表 jsplumb json数据
                $jsplumb = json_decode($flow->jsplumb, true);
                $jsplumb['total'] = count($process_info);

                foreach ($process_info as $k => $v) {
                    //更新flow 表 jsplumb json数据
                    // dump($v);
                    foreach ($jsplumb['list'] as $i => $j) {
                        if ($k == $j['id']) {
                            $process = ProcessModel::find($k);
                            $process->update([
                                'style' => 'width:' . $process->style_width . 'px;height:' . $process->style_width . 'px;line-height:30px;color:' . $process->style_color . ';left:' . $v['left'] . 'px;top:' . $v['top'] . 'px;',
                                'position_left' => $v['left'] . 'px',
                                'position_top' => $v['top'] . 'px',
                                'id' => $k
                            ]);

                            $jsplumb['list'][$i]['process_to'] = implode(',', $v['process_to']);
                            $jsplumb['list'][$i]['style'] = 'width:' . $process->style_width . 'px;height:' . $process->style_height . 'px;line-height:30px;color:' . $process->style_color . ';left:' . $v['left'] . 'px;top:' . $v['top'] . 'px;';

                        }
                    }

                    //更新流程轨迹 flowlink表 type=Condition
                    $old_process_ids = FlowlinkModel::where(['flow_id' => $flow_id, 'type' => 'Condition', 'process_id' => $k])->column('next_process_id');

                    if (!empty($v['process_to'])) {

                        if ($v['process_to'] != $old_process_ids) {
                            //有变动
                            //新增连线
                            $adds = array_diff($v['process_to'], $old_process_ids);
                            foreach ($adds as $a) {
                                FlowlinkModel::create([
                                    'flow_id' => $flow_id,
                                    'type' => 'Condition',
                                    'process_id' => $k,
                                    'next_process_id' => $a,
                                    'sort' => 100
                                ]);
                            }

                            //删除的连线
                            $dels = array_diff($old_process_ids, $v['process_to']);
                            FlowlinkModel::where(['flow_id' => $flow_id, 'type' => 'Condition', 'process_id' => $k])->whereIn('next_process_id', $dels)->delete();
                        }
                    } else {

                        if (count($old_process_ids) > 1) {
                            //只保留一个
                            $old_id = array_pop($old_process_ids);
                            FlowlinkModel::where(['flow_id' => $flow_id, 'type' => 'Condition', 'process_id' => $k])->whereIn('next_process_id', $old_process_ids)->delete();
                            FlowlinkModel::where(['flow_id' => $flow_id, 'type' => 'Condition', 'process_id' => $old_id])->update(['next_process_id' => -1]);
                        } else {
                            if (FlowlinkModel::where(['flow_id' => $flow_id, 'type' => 'Condition', 'process_id' => $k])->find()) {
                                FlowlinkModel::where(['flow_id' => $flow_id, 'type' => 'Condition', 'process_id' => $k])->update(['next_process_id' => -1]);
                            } else {
                                FlowlinkModel::create([
                                    'flow_id' => $flow_id,
                                    'type' => 'Condition',
                                    'process_id' => $k,
                                    'next_process_id' => -1,
                                    'sort' => 100
                                ]);
                            }
                        }
                    }
                }
                $flow->jsplumb = json_encode($jsplumb);
                $flow->is_publish = 0;
                $flow->save();
            }
            Db::commit();
            return json(['code' => 1, 'msg' => '更新成功']);
        } catch (\Eexception $e) {
            Db::rollabck();
            return json(['code' => 0, 'msg' => $e->getMessage()]);
        }
    }

    //部门
    public function dept(Request $request, $id)
    {
        $depts = SystemDept::where('status', '1')->field('id,parentid,name')->select();
        $depts = arr2table(Tools::buildArrFromObj($depts), 'id', 'parentid');
        $process = ProcessModel::find($id);
        $dep_ids = FlowlinkModel::where('type', 'Dept')->where('process_id', $process->id)->value('auditor');
        $select_dep = SystemDept::whereIn('id', explode(',', $dep_ids))
            ->select();
        return view('department', [
            'depts' => $depts,
            'select_emps' => $select_dep,
            'title' => '选择部门'
        ]);
    }

    //角色
    public function role(Request $request, $id)
    {
        $depts = SystemDept::where('status', '1')->field('id,parentid,name')->select();
        $depts = arr2table(Tools::buildArrFromObj($depts), 'id', 'parentid');
        $position = Db::name('SystemPosition')->field('id,name')->select();
        $employee = SystemUser::where('status', 1)->select();
        $process = ProcessModel::find($id);
        $select_emps = Db::name('SystemUser')
            ->whereIn('id', explode(',', FlowlinkModel::where('type', 'Role')
                ->where('process_id', $process->id)->value('auditor')))->select();
        return view('', [
            'depts' => $depts,
            'select_emps' => $select_emps,
            'emps' => $employee,
            'position' => $position,
            'title' => '选择角色'
        ]);
    }

    /**根据部门获取角色
     * @param Request $request
     * @return \think\response\Json
     */
    public function get_auth_list(Request $request)
    {
        if ($request->isPost()) {
            $departmentid = $request->post('departmentid', 0);
            $list = Db::name('SystemAuth')->where(['status' => 1, 'departmentid' => $departmentid])->field('id,title')->select();
            return json($list);
        }
    }

    /**选择员工
     * @param Request $request
     * @param $id 流程id
     */
    public function emp(Request $request, $id)
    {
        $depts = SystemDept::where('status', '1')->field('id,parentid,name')->select();
        $depts = arr2table(Tools::buildArrFromObj($depts), 'id', 'parentid');
        $employee = SystemUser::where('status', 1)->select();
        $process = ProcessModel::find($id);
        $select_emps = SystemUser::whereIn('id', explode(',', FlowlinkModel::where('type', 'Emp')->where('process_id', $process->id)->value('auditor')))
            ->select();
        return view('employee', [
            'depts' => $depts,
            'select_emps' => $select_emps,
            'emps' => $employee,
            'title' => '选择员工'
        ]);
    }

    /**获取部门下用户
     * @param Request $request
     * @return \think\response\Json
     */
    public function get_user_list(Request $request)
    {
        if ($request->isPost()) {
            $departmentid = $request->post('departmentid', 0);
            $list = SystemUser::where(['status' => 1, 'deptid' => $departmentid])->field('id,nickname as username')->select();
            return json($list);
        }
    }
}