<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/17
 * Time: 18:10
 */

namespace app\model;

use app\util\Tools;
use think\Db;
use app\util\OrderComponents;

class Order extends Base {

    /**
      /* @author 林桂均
     * 订单列表查询
     * @param array $where
     * @param $page
     * @return array
     * @throws \think\exception\DbException
     */
    public static function orderList($where = [], $page, $pageSize) {
        !$pageSize && $pageSize=config('apiBusiness.ADMIN_LIST_DEFAULT');
        return self::alias('x')
                        ->field('x.order_sn,x.financing_manager_id,x.type,x.create_time,x.stage,x.status,z.is_bank_loan_finish,z.guarantee_fee_status,y.estate_region,estate_name,y.estate_owner')
                        ->join('estate y', 'x.order_sn=y.order_sn')
                        ->join('order_guarantee z', 'x.order_sn=z.order_sn')
                        ->where($where)
                        ->order('x.create_time desc')
                        ->group('x.order_sn')
                        ->paginate(['list_rows' => $pageSize, 'page' => $page])
                        ->toArray();
    }


    /**
      /* @author 林桂均
     * 订单详情
     * @param $orderSn
     * @return array
     * @throws \think\exception\DbException
     */
    public static function orderDetail($orderSn) {
        $orderInfo = self::alias('x')
                        ->field('x.order_sn,x.type,x.create_time,x.stage,x.status,x.financing_manager_id,x.create_uid,
            y.notarization,y.guarantee_money,y.self_financing,y.guarantee_per,y.guarantee_rate,y.bussiness_loan,y.accumulation_fund,y.account_per,y.guarantee_fee,y.fee,y.info_fee,y.total_fee')
                        ->join('order_guarantee y', 'x.order_sn=y.order_sn', 'left')
                        ->where(['x.order_sn' => $orderSn, 'x.status' => 1])->find();
        if (!$orderInfo)
            return false;
        return $orderInfo;
    }

    /* @author 赵光帅
     * 费用入账列表查询
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */

    public static function costList($map, $page, $pageSize) {
        return self::alias('x')
                        ->field('x.order_sn,x.finance_sn,x.type,z.name,estate_name,y.estate_owner,n.ac_guarantee_fee_time,n.guarantee_fee,n.ac_guarantee_fee,n.guarantee_fee_status')
                        ->join('order_guarantee n', 'x.order_sn=n.order_sn')
                        ->join('estate y', 'x.order_sn=y.order_sn')
                        ->join('system_user z', 'x.financing_manager_id=z.id')
                        ->where($map)
                        ->order('x.create_time desc')
                        ->group('x.order_sn')
                        ->paginate(array('list_rows' => $pageSize, 'page' => $page))
                        ->toArray();
    }

    /* @author 赵光帅
     * 订单信息与财务入账流水明细
     * @apiParam {string}  order_sn   订单编号
     */

    public static function booksDetail($order_sn) {
        return self::alias('x')
                        ->field('x.order_sn,x.type,z.name,z.deptname,x.finance_sn,n.self_financing,n.guarantee_fee,n.fee,n.guarantee_fee_status')
                        ->join('order_guarantee n', 'x.order_sn=n.order_sn')
                        ->join('system_user z', 'x.financing_manager_id=z.id')
                        ->where(['x.order_sn' => $order_sn])
                        ->find();
    }

    /* @author 赵光帅
     * 订单信息与银行放款流水明细
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */

    public static function bankList($map, $page, $pageSize) {
        return self::alias('x')
                        ->field('x.order_sn,x.finance_sn,x.type,z.name,estate_name,y.estate_owner,n.bank_money_time,n.guarantee_money,n.bank_money,n.bank_money_status')
                        ->join('order_guarantee n', 'x.order_sn=n.order_sn')
                        ->join('estate y', 'x.order_sn=y.order_sn')
                        ->join('system_user z', 'x.financing_manager_id=z.id')
                        ->where($map)
                        ->order('n.bank_money_time desc')
                        ->group('x.order_sn')
                        ->paginate(array('list_rows' => $pageSize, 'page' => $page))
                        ->toArray();
    }

    /* @author 赵光帅
     * 银行放款入账流水订单信息
     * @apiParam {string}  order_sn   订单编号
     */

    public static function banksDetail($order_sn) {
        return self::alias('x')
                        ->field('x.order_sn,x.type,z.name,z.deptname,x.finance_sn,n.guarantee_money,n.bank_money,n.is_bank_loan_finish,n.bussiness_loan+n.accumulation_fund as chuzhang_money,y.dp_redeem_bank')
                        ->join('order_guarantee n', 'x.order_sn = n.order_sn', 'LEFT')
                        ->join('system_user z', 'x.financing_manager_id = z.id', 'LEFT')
                        ->join('order_dp y', 'x.order_sn = y.order_sn', 'LEFT')
                        ->where(['x.order_sn' => $order_sn])
                        ->find();
    }

    /* @author 赵光帅
     * 发送指令列表
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */

    public static function instructionList($map, $page, $pageSize) {
        return self::alias('x')
                        ->field('x.order_sn,x.finance_sn,x.type,z.name,y.estate_name,y.estate_owner,n.instruct_status,n.is_bank_loan_finish')
                        ->join('order_guarantee n', 'x.order_sn=n.order_sn')
                        ->join('estate y', 'x.order_sn=y.order_sn')
                        ->join('system_user z', 'x.financing_manager_id=z.id')
                        ->where($map)
                        ->order('n.bank_money_time desc')
                        ->group('x.order_sn')
                        ->paginate(array('list_rows' => $pageSize, 'page' => $page))
                        ->toArray();
    }

    /* @author 赵光帅
     * 资料入架列表
     * @Param {arr} $map    搜索条件
     * @Param {int} $page    页码
     * @Param {int} $pageSize    每页数量
     */

    public static function dataList($map, $page, $pageSize) {
        $resInfo = self::alias('x')
            ->field('x.order_sn,x.type,x.stage,x.create_time,z.name,y.estate_name,y.estate_region,y.estate_owner,n.is_combined_loan')
            ->join('order_guarantee n', 'x.order_sn=n.order_sn')
            ->join('estate y', 'x.order_sn=y.order_sn')
            ->join('system_user z', 'x.financing_manager_id=z.id')
            ->where($map)
            ->order('n.bank_money_time desc')
            ->group('x.order_sn')
            ->paginate(array('list_rows' => $pageSize, 'page' => $page))
            ->toArray();
        foreach ($resInfo['data'] as $k => $v){
            $resInfo['data'][$k]['order_status'] = get_stage($v['stage']);
            unset($resInfo['data'][$k]['stage']);
            $estate_ecity_arr = explode('|',$v['estate_region']);
            if(is_array($estate_ecity_arr)){
                $resInfo['data'][$k]['estate_ecity_name'] = $estate_ecity_arr[0];
                if(!empty($estate_ecity_arr[1])){
                    $resInfo['data'][$k]['estate_district_name'] = $estate_ecity_arr[1];
                }
            }else{
                $resInfo['data'][$k]['estate_ecity_name'] = '';
                $resInfo['data'][$k]['estate_district_name'] = '';
            }
            unset($resInfo['data'][$k]['estate_region']);
            $organization = OrderComponents::showMortgage($v['order_sn'],'organization','ORIGINAL');
            $resInfo['data'][$k]['organization'] = $organization;
        }
        return $resInfo;
    }

    /**
     * 获取业务类型
     * @return 业务类型
     * @throws \think\db\exception\DataNotFoundException
     * @param $type
     * @author zhongjiaqi 5.18
     */
    public function getType($type = '') {
        $types = (new Dictionary())->getValnameByCode('ORDER_TYPE', $type);
        return empty($types) ? '' : $types;
    }

    /**
     * 赎楼正常派单列表
     * @param $where
     * @param $page
     * @param $pageSize
     * @return array
     * @throws \think\exception\DbException
     */
    public static function ransomerList($where=[], $page, $pageSize) {
        $status = input('status');
        if ($status == '0') {
            $join = 'left';
        } elseif ($status == '1') {
            $join = 'inner';
        } else {
            $join = 'left';
            $where['a.ransomer'] = Null;
        }
        $where['x.status'] = 1;
        !$pageSize && $pageSize=config('apiBusiness.ADMIN_LIST_DEFAULT');
        return self::alias('x')
                        ->field('distinct(x.order_sn),x.financing_manager_id,x.finance_sn,x.type,y.estate_owner,z.is_combined_loan,GROUP_CONCAT(distinct  a.ransom_bank) AS ransom_bank,GROUP_CONCAT(distinct  a.ransomer) AS ransomer ')
                        ->join('estate y', 'x.order_sn=y.order_sn')
                        ->join('order_guarantee z', 'x.order_sn=z.order_sn')
                        ->join('order_ransom_dispatch a', 'x.order_sn=a.order_sn', $join)
                        ->where($where)
                        ->order('x.create_time desc')
                        ->group('x.order_sn')
                        ->paginate(['list_rows' => $pageSize, 'page' => $page])
                        ->toArray();
    }

    /**
     * 退回派单列表
     * @param $where
     * @param $page
     * @param $pageSize
     * @return array
     * @throws \think\exception\DbException
     */
    public static function returnRansomerList($where=[],$page,$pageSize){
        $where['a.status'] = 2;
        $where['x.status'] = 1;
        !$pageSize && $pageSize=config('apiBusiness.ADMIN_LIST_DEFAULT');
        return self::alias('x')
            ->field('x.order_sn,x.financing_manager_id,x.finance_sn,x.type,y.estate_owner,z.is_combined_loan,GROUP_CONCAT(distinct  a.ransom_bank) AS ransom_bank,GROUP_CONCAT(distinct  a.ransomer) AS ransomer,a.create_time,a.ransom_type')
            ->join('estate y','x.order_sn=y.order_sn')
            ->join('order_guarantee z','x.order_sn=z.order_sn')
            ->join('order_ransom_dispatch a','x.order_sn=a.order_sn')
            ->where($where)
            ->order('x.create_time desc')
            ->group('x.order_sn')
            ->paginate( ['list_rows'=>$pageSize,'page'=>$page])
            ->toArray();
    }

    /**
     * 权证列表
     */
    public static function orderWarrant($where=[],$page,$pageSize)
    {
        $where['x.status'] = 1;
        !$pageSize && $pageSize=config('apiBusiness.ADMIN_LIST_DEFAULT');
        return self::alias('x')
            ->field('x.order_sn,x.type,y.estate_owner,z.is_finish,z.create_time,a.name,a.deptname')
            ->join('estate y','x.order_sn=y.order_sn')
            ->join('order_warrant z','x.order_sn=z.order_sn')
            ->join('system_user a ','a.id=x.financing_manager_id')
            ->where($where)
            ->order('x.create_time desc')
            ->group('x.order_sn')
            ->paginate( ['list_order_snrows'=>$pageSize,'page'=>$page])
            ->toArray();
    }

}
